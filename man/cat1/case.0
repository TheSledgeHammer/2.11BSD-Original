


SH(1)		    UNIX Programmer's Manual		    SH(1)



NAME
     sh, for, case, if, while, :, ., break, continue, cd, eval,
     exec, exit, export, login, read, readonly, set, shift,
     times, trap, umask, wait - command language

SYNOPSIS
     sh [ -ceiknrstuvx ] [ arg ] ...

DESCRIPTION
     _S_h is a command programming language that executes commands
     read from a terminal or a file.  See invocation for the
     meaning of arguments to the shell.

     Commands.
     A _s_i_m_p_l_e-_c_o_m_m_a_n_d is a sequence of non blank _w_o_r_d_s separated
     by blanks (a blank is a tab or a space).  The first word
     specifies the name of the command to be executed.	Except as
     specified below the remaining words are passed as arguments
     to the invoked command.  The command name is passed as argu-
     ment 0 (see _e_x_e_c_v_e(2)).  The _v_a_l_u_e of a simple-command is
     its exit status if it terminates normally or 200+_s_t_a_t_u_s if
     it terminates abnormally (see _s_i_g_v_e_c(2) for a list of status
     values).

     A _p_i_p_e_l_i_n_e is a sequence of one or more _c_o_m_m_a_n_d_s separated
     by |. The standard output of each command but the last is
     connected by a _p_i_p_e(2) to the standard input of the next
     command.  Each command is run as a separate process; the
     shell waits for the last command to terminate.

     A _l_i_s_t is a sequence of one or more _p_i_p_e_l_i_n_e_s separated by
     ;, &, && or || and optionally terminated by ; or &.  ; and &
     have equal precedence which is lower than that of && and ||,
     && and || also have equal precedence.  A semicolon causes
     sequential execution; an ampersand causes the preceding
     _p_i_p_e_l_i_n_e to be executed without waiting for it to finish.
     The symbol && (||) causes the _l_i_s_t following to be executed
     only if the preceding _p_i_p_e_l_i_n_e returns a zero (non zero)
     value.  Newlines may appear in a _l_i_s_t, instead of semi-
     colons, to delimit commands.

     A _c_o_m_m_a_n_d is either a simple-command or one of the follow-
     ing.  The value returned by a command is that of the last
     simple-command executed in the command.

     for _n_a_m_e [in _w_o_r_d ...] do _l_i_s_t done
	  Each time a for command is executed _n_a_m_e is set to the
	  next word in the for word list.  If in _w_o_r_d ...  is
	  omitted, in "$@" is assumed.	Execution ends when there
	  are no more words in the list.

     case _w_o_r_d in [_p_a_t_t_e_r_n [ | _p_a_t_t_e_r_n ] ... ) _l_i_s_t ;;] ... esac



Printed 11/26/99	   May 5, 1986				1






SH(1)		    UNIX Programmer's Manual		    SH(1)



	  A case command executes the _l_i_s_t associated with the
	  first pattern that matches _w_o_r_d. The form of the pat-
	  terns is the same as that used for file name genera-
	  tion.

     if _l_i_s_t then _l_i_s_t [elif _l_i_s_t then _l_i_s_t] ... [else _l_i_s_t] fi
	  The _l_i_s_t following if is executed and if it returns
	  zero the _l_i_s_t following then is executed.  Otherwise,
	  the _l_i_s_t following elif is executed and if its value is
	  zero the _l_i_s_t following then is executed.  Failing that
	  the else _l_i_s_t is executed.

     while _l_i_s_t [do _l_i_s_t] done
	  A while command repeatedly executes the while _l_i_s_t and
	  if its value is zero executes the do _l_i_s_t; otherwise
	  the loop terminates.	The value returned by a while
	  command is that of the last executed command in the do
	  _l_i_s_t. until may be used in place of while to negate the
	  loop termination test.

     ( _l_i_s_t )
	  Execute _l_i_s_t in a subshell.

     { _l_i_s_t }
	  _l_i_s_t is simply executed.

     The following words are only recognized as the first word of
     a command and when not quoted.

	  if then else elif fi case in esac for while until do
	  done { }

     Command substitution.
     The standard output from a command enclosed in a pair of
     back quotes (``) may be used as part or all of a word;
     trailing newlines are removed.

     Parameter substitution.
     The character $ is used to introduce substitutable parame-
     ters.  Positional parameters may be assigned values by set.
     Variables may be set by writing

	  _n_a_m_e=_v_a_l_u_e [ _n_a_m_e=_v_a_l_u_e ] ...

     ${_p_a_r_a_m_e_t_e_r}
	  A _p_a_r_a_m_e_t_e_r is a sequence of letters, digits or under-
	  scores (a _n_a_m_e), a digit, or any of the characters * @
	  # ? - $ !.  The value, if any, of the parameter is sub-
	  stituted.  The braces are required only when _p_a_r_a_m_e_t_e_r
	  is followed by a letter, digit, or underscore that is
	  not to be interpreted as part of its name.  If _p_a_r_a_m_e_-
	  _t_e_r is a digit, it is a positional parameter.  If



Printed 11/26/99	   May 5, 1986				2






SH(1)		    UNIX Programmer's Manual		    SH(1)



	  _p_a_r_a_m_e_t_e_r is * or @ then all the positional parameters,
	  starting with $1, are substituted separated by spaces.
	  $0 is set from argument zero when the shell is invoked.

     ${_p_a_r_a_m_e_t_e_r-_w_o_r_d}
	  If _p_a_r_a_m_e_t_e_r is set, substitute its value; otherwise
	  substitute _w_o_r_d.

     ${_p_a_r_a_m_e_t_e_r=_w_o_r_d}
	  If _p_a_r_a_m_e_t_e_r is not set, set it to _w_o_r_d; the value of
	  the parameter is then substituted.  Positional parame-
	  ters may not be assigned to in this way.

     ${_p_a_r_a_m_e_t_e_r?_w_o_r_d}
	  If _p_a_r_a_m_e_t_e_r is set, substitute its value; otherwise,
	  print _w_o_r_d and exit from the shell.  If _w_o_r_d is omit-
	  ted, a standard message is printed.

     ${_p_a_r_a_m_e_t_e_r+_w_o_r_d}
	  If _p_a_r_a_m_e_t_e_r is set, substitute _w_o_r_d; otherwise substi-
	  tute nothing.

     In the above _w_o_r_d is not evaluated unless it is to be used
     as the substituted string.  (So that, for example, echo
     ${d-'pwd'} will only execute _p_w_d if _d is unset.)

     The following _p_a_r_a_m_e_t_e_r_s are automatically set by the shell.

	  #    The number of positional parameters in decimal.
	  -    Options supplied to the shell on invocation or by
	       set.
	  ?    The value returned by the last executed command in
	       decimal.
	  $    The process number of this shell.
	  !    The process number of the last background command
	       invoked.

     The following _p_a_r_a_m_e_t_e_r_s are used but not set by the shell.

	  HOME The default argument (home directory) for the cd
	       command.
	  PATH The search path for commands (see execution).
	  MAIL If this variable is set to the name of a mail
	       file, the shell informs the user of the arrival of
	       mail in the specified file.
	  PS1  Primary prompt string, by default '$ '.
	  PS2  Secondary prompt string, by default '> '.
	  IFS  Internal field separators, normally space, tab,
	       and newline.  IFS is ignored if _s_h is running as
	       root or if the effective user id differs from the
	       real user id.




Printed 11/26/99	   May 5, 1986				3






SH(1)		    UNIX Programmer's Manual		    SH(1)



     Blank interpretation.
     After parameter and command substitution, any results of
     substitution are scanned for internal field separator char-
     acters (those found in $IFS) and split into distinct argu-
     ments where such characters are found.  Explicit null argu-
     ments ("" or '') are retained.  Implicit null arguments
     (those resulting from _p_a_r_a_m_e_t_e_r_s that have no values) are
     removed.

     File name generation.
     Following substitution, each command word is scanned for the
     characters *, ? and [. If one of these characters appears,
     the word is regarded as a pattern.  The word is replaced
     with alphabetically sorted file names that match the pat-
     tern.  If no file name is found that matches the pattern,
     the word is left unchanged.  The character . at the start of
     a file name or immediately following a /, and the character
     /, must be matched explicitly.

     *	  Matches any string, including the null string.
     ?	  Matches any single character.
     [...]
	  Matches any one of the characters enclosed.  A pair of
	  characters separated by - matches any character lexi-
	  cally between the pair.

     Quoting.
     The following characters have a special meaning to the shell
     and cause termination of a word unless quoted.

	  ;   &   (   )   |   <   >   newline	space	tab

     A character may be _q_u_o_t_e_d by preceding it with a \.  \new-
     line is ignored.  All characters enclosed between a pair of
     quote marks (''), except a single quote, are quoted.  Inside
     double quotes ("") parameter and command substitution occurs
     and \ quotes the characters \ ' " and $.

     "$*" is equivalent to "$1 $2 ..." whereas
     "$@" is equivalent to "$1" "$2" ... .

     Prompting.
     When used interactively, the shell prompts with the value of
     PS1 before reading a command.  If at any time a newline is
     typed and further input is needed to complete a command, the
     secondary prompt ($PS2) is issued.

     Input output.
     Before a command is executed its input and output may be
     redirected using a special notation interpreted by the
     shell.  The following may appear anywhere in a simple-
     command or may precede or follow a _c_o_m_m_a_n_d and are not



Printed 11/26/99	   May 5, 1986				4






SH(1)		    UNIX Programmer's Manual		    SH(1)



     passed on to the invoked command.	Substitution occurs
     before _w_o_r_d or _d_i_g_i_t is used.

     <_w_o_r_d
	  Use file _w_o_r_d as standard input (file descriptor 0).

     >_w_o_r_d
	  Use file _w_o_r_d as standard output (file descriptor 1).
	  If the file does not exist, it is created; otherwise it
	  is truncated to zero length.

     >>_w_o_r_d
	  Use file _w_o_r_d as standard output.  If the file exists,
	  output is appended (by seeking to the end); otherwise
	  the file is created.

     <<_w_o_r_d
	  The shell input is read up to a line the same as _w_o_r_d,
	  or end of file.  The resulting document becomes the
	  standard input.  If any character of _w_o_r_d is quoted, no
	  interpretation is placed upon the characters of the
	  document; otherwise, parameter and command substitution
	  occurs, \newline is ignored, and \ is used to quote the
	  characters \ $ ' and the first character of _w_o_r_d.

     <&_d_i_g_i_t
	  The standard input is duplicated from file descriptor
	  _d_i_g_i_t; see _d_u_p(2).  Similarly for the standard output
	  using >.

     <&-  The standard input is closed.  Similarly for the stan-
	  dard output using >.

     If one of the above is preceded by a digit, the file
     descriptor created is that specified by the digit (instead
     of the default 0 or 1).  For example,

	  ... 2>&1

     creates file descriptor 2 to be a duplicate of file descrip-
     tor 1.

     If a command is followed by & then the default standard
     input for the command is the empty file (/dev/null).  Other-
     wise, the environment for the execution of a command con-
     tains the file descriptors of the invoking shell as modified
     by input output specifications.

     Environment.
     The environment is a list of name-value pairs that is passed
     to an executed program in the same way as a normal argument
     list; see _e_x_e_c_v_e(2) and _e_n_v_i_r_o_n(7).  The shell interacts



Printed 11/26/99	   May 5, 1986				5






SH(1)		    UNIX Programmer's Manual		    SH(1)



     with the environment in several ways.  On invocation, the
     shell scans the environment and creates a _p_a_r_a_m_e_t_e_r for each
     name found, giving it the corresponding value.  Executed
     commands inherit the same environment.  If the user modifies
     the values of these _p_a_r_a_m_e_t_e_r_s or creates new ones, none of
     these affects the environment unless the export command is
     used to bind the shell's _p_a_r_a_m_e_t_e_r to the environment.  The
     environment seen by any executed command is thus composed of
     any unmodified name-value pairs originally inherited by the
     shell, plus any modifications or additions, all of which
     must be noted in export commands.

     The environment for any _s_i_m_p_l_e-_c_o_m_m_a_n_d may be augmented by
     prefixing it with one or more assignments to _p_a_r_a_m_e_t_e_r_s.
     Thus these two lines are equivalent

	  TERM=450 cmd args
	  (export TERM; TERM=450; cmd args)

     If the -k flag is set, _a_l_l keyword arguments are placed in
     the environment, even if the occur after the command name.
     The following prints 'a=b c' and 'c':
     echo a=b c
     set -k
     echo a=b c

     Signals.
     The INTERRUPT and QUIT signals for an invoked command are
     ignored if the command is followed by &; otherwise signals
     have the values inherited by the shell from its parent.
     (But see also trap.)

     Execution.
     Each time a command is executed the above substitutions are
     carried out.  Except for the 'special commands' listed below
     a new process is created and an attempt is made to execute
     the command via an _e_x_e_c_v_e(2).

     The shell parameter $PATH defines the search path for the
     directory containing the command.	Each alternative direc-
     tory name is separated by a colon (:).  The default path is
     :/bin:/usr/bin.  If the command name contains a /, the
     search path is not used.  Otherwise, each directory in the
     path is searched for an executable file.  If the file has
     execute permission but is not an _a._o_u_t file, it is assumed
     to be a file containing shell commands.  A subshell (i.e., a
     separate process) is spawned to read it.  A parenthesized
     command is also executed in a subshell.

     Special commands.
     The following commands are executed in the shell process and
     except where specified no input output redirection is



Printed 11/26/99	   May 5, 1986				6






SH(1)		    UNIX Programmer's Manual		    SH(1)



     permitted for such commands.

     #	  For non-interactive shells, everything following the #
	  is treated as a comment, i.e. the rest of the line is
	  ignored.  For interactive shells, the # has no special
	  effect.

     :	  No effect; the command does nothing.
     . _f_i_l_e
	  Read and execute commands from _f_i_l_e and return.  The
	  search path $PATH is used to find the directory con-
	  taining _f_i_l_e.
     break [_n]
	  Exit from the enclosing for or while loop, if any.  If
	  _n is specified, break _n levels.
     continue [_n]
	  Resume the next iteration of the enclosing for or while
	  loop.  If _n is specified, resume at the _n-th enclosing
	  loop.
     cd [_a_r_g]
	  Change the current directory to _a_r_g. The shell parame-
	  ter $HOME is the default _a_r_g.
     eval [_a_r_g ...]
	  The arguments are read as input to the shell and the
	  resulting command(s) executed.
     exec [_a_r_g ...]
	  The command specified by the arguments is executed in
	  place of this shell without creating a new process.
	  Input output arguments may appear and if no other argu-
	  ments are given cause the shell input output to be
	  modified.
     exit [_n]
	  Causes a non interactive shell to exit with the exit
	  status specified by _n. If _n is omitted, the exit status
	  is that of the last command executed.  (An end of file
	  will also exit from the shell.)
     export [_n_a_m_e ...]
	  The given names are marked for automatic export to the
	  _e_n_v_i_r_o_n_m_e_n_t of subsequently-executed commands.  If no
	  arguments are given, a list of exportable names is
	  printed.
     login [_a_r_g ...]
	  Equivalent to 'exec login arg ...'.
     read _n_a_m_e ...
	  One line is read from the standard input; successive
	  words of the input are assigned to the variables _n_a_m_e
	  in order, with leftover words to the last variable.
	  The return code is 0 unless the end-of-file is encoun-
	  tered.
     readonly [_n_a_m_e ...]
	  The given names are marked readonly and the values of
	  the these names may not be changed by subsequent



Printed 11/26/99	   May 5, 1986				7






SH(1)		    UNIX Programmer's Manual		    SH(1)



	  assignment.  If no arguments are given, a list of all
	  readonly names is printed.
     set [-eknptuvx [_a_r_g ...]]
	  -e If non interactive, exit immediately if a command
	     fails.
	  -k All keyword arguments are placed in the environment
	     for a command, not just those that precede the com-
	     mand name.
	  -n Read commands but do not execute them.
	  -t Exit after reading and executing one command.
	  -u Treat unset variables as an error when substituting.
	  -v Print shell input lines as they are read.
	  -x Print commands and their arguments as they are exe-
	     cuted.
	  -  Turn off the -x and -v options.

	  These flags can also be used upon invocation of the
	  shell.  The current set of flags may be found in $-.

	  Remaining arguments are positional parameters and are
	  assigned, in order, to $1, $2, etc.  If no arguments
	  are given, the values of all names are printed.

     shift
	  The positional parameters from $2...	are renamed $1...

     times
	  Print the accumulated user and system times for
	  processes run from the shell.

     trap [_a_r_g] [_n] ...
	  _A_r_g is a command to be read and executed when the shell
	  receives signal(s) _n. (Note that _a_r_g is scanned once
	  when the trap is set and once when the trap is taken.)
	  Trap commands are executed in order of signal number.
	  If _a_r_g is absent, all trap(s) _n are reset to their ori-
	  ginal values.  If _a_r_g is the null string, this signal
	  is ignored by the shell and by invoked commands.  If _n
	  is 0, the command _a_r_g is executed on exit from the
	  shell, otherwise upon receipt of signal _n as numbered
	  in _s_i_g_v_e_c(2).  _T_r_a_p with no arguments prints a list of
	  commands associated with each signal number.

     umask [ _n_n_n ]
	  The user file creation mask is set to the octal value
	  _n_n_n (see _u_m_a_s_k(2)).  If _n_n_n is omitted, the current
	  value of the mask is printed.

     wait [_n]
	  Wait for the specified process and report its termina-
	  tion status.	If _n is not given, all currently active
	  child processes are waited for.  The return code from



Printed 11/26/99	   May 5, 1986				8






SH(1)		    UNIX Programmer's Manual		    SH(1)



	  this command is that of the process waited for.

     Invocation.
     If the first character of argument zero is -, commands are
     read from $HOME/.profile, if such a file exists.  Commands
     are then read as described below.	The following flags are
     interpreted by the shell when it is invoked.
     -c _s_t_r_i_n_g	If the -c flag is present, commands are read from
		_s_t_r_i_n_g.
     -s         If the -s flag is present or if no arguments
		remain then commands are read from the standard
		input.	Shell output is written to file descrip-
		tor 2.
     -i         If the -i flag is present or if the shell input
		and output are attached to a terminal (as told by
		_g_t_t_y) then this shell is _i_n_t_e_r_a_c_t_i_v_e. In this
		case the terminate signal SIGTERM (see _s_i_g_v_e_c(2))
		is ignored (so that 'kill 0' does not kill an
		interactive shell) and the interrupt signal SIG-
		INT is caught and ignored (so that wait is inter-
		ruptible).  In all cases SIGQUIT is ignored by
		the shell.

     The remaining flags and arguments are described under the
     set command.

FILES
     $HOME/.profile
     /tmp/sh*
     /dev/null

SEE ALSO
     csh(1), test(1), execve(2), environ(7)

DIAGNOSTICS
     Errors detected by the shell, such as syntax errors cause
     the shell to return a non zero exit status.  If the shell is
     being used non interactively then execution of the shell
     file is abandoned.  Otherwise, the shell returns the exit
     status of the last command executed (see also exit).

BUGS
     If << is used to provide standard input to an asynchronous
     process invoked by &, the shell gets mixed up about naming
     the input document.  A garbage file /tmp/sh* is created, and
     the shell complains about not being able to find the file by
     another name.








Printed 11/26/99	   May 5, 1986				9



