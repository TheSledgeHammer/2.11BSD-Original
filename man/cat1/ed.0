


ED(1)		    UNIX Programmer's Manual		    ED(1)



NAME
     ed - text editor

SYNOPSIS
     ed [ - ] [ name ]

DESCRIPTION
     _E_d is the standard text editor.

     If a _n_a_m_e argument is given, _e_d simulates an _e command (see
     below) on the named file; that is to say, the file is read
     into _e_d'_s buffer so that it can be edited.  The optional -
     suppresses the printing of explanatory output and should be
     used when the standard input is an editor script.

     _E_d operates on a copy of any file it is editing; changes
     made in the copy have no effect on the file until a _w
     (write) command is given.	The copy of the text being edited
     resides in a temporary file called the _b_u_f_f_e_r.

     Commands to _e_d have a simple and regular structure: zero or
     more _a_d_d_r_e_s_s_e_s followed by a single character _c_o_m_m_a_n_d, pos-
     sibly followed by parameters to the command.  These
     addresses specify one or more lines in the buffer.  Missing
     addresses are supplied by default.

     In general, only one command may appear on a line.  Certain
     commands allow the addition of text to the buffer.  While _e_d
     is accepting text, it is said to be in _i_n_p_u_t _m_o_d_e. In this
     mode, no commands are recognized; all input is merely col-
     lected.  Input mode is left by typing a period `.' alone at
     the beginning of a line.

     _E_d supports a limited form of _r_e_g_u_l_a_r _e_x_p_r_e_s_s_i_o_n notation.
     A regular expression specifies a set of strings of charac-
     ters.  A member of this set of strings is said to be _m_a_t_c_h_e_d
     by the regular expression.  In the following specification
     for regular expressions the word `character' means any char-
     acter but newline.

     1.   Any character except a special character matches
	  itself.  Special characters are the regular expression
	  delimiter plus \[.  and sometimes ^*$.

     2.   A . matches any character.

     3.   A \ followed by any character except a digit or ()
	  matches that character.

     4.   A nonempty string _s bracketed [_s] (or [^_s]) matches any
	  character in (or not in) _s. In _s, \ has no special
	  meaning, and ] may only appear as the first letter.  A



Printed 11/26/99	 August 12, 1986			1






ED(1)		    UNIX Programmer's Manual		    ED(1)



	  substring _a-_b, with _a and _b in ascending ASCII order,
	  stands for the inclusive range of ASCII characters.

     5.   A regular expression of form 1-4 followed by * matches
	  a sequence of 0 or more matches of the regular expres-
	  sion.

     6.   A regular expression, _x, of form 1-8, bracketed \(_x\)
	  matches what _x matches.

     7.   A \ followed by a digit _n matches a copy of the string
	  that the bracketed regular expression beginning with
	  the _nth \( matched.

     8.   A regular expression of form 1-8, _x, followed by a reg-
	  ular expression of form 1-7, _y matches a match for _x
	  followed by a match for _y, with the _x match being as
	  long as possible while still permitting a _y match.

     9.   A regular expression of form 1-8 preceded by ^ (or fol-
	  lowed by $), is constrained to matches that begin at
	  the left (or end at the right) end of a line.

     10.  A regular expression of form 1-9 picks out the longest
	  among the leftmost matches in a line.

     11.  An empty regular expression stands for a copy of the
	  last regular expression encountered.

     Regular expressions are used in addresses to specify lines
     and in one command (see _s below) to specify a portion of a
     line which is to be replaced.  If it is desired to use one
     of the regular expression metacharacters as an ordinary
     character, that character may be preceded by `\'.	This also
     applies to the character bounding the regular expression
     (often `/') and to `\' itself.

     To understand addressing in _e_d it is necessary to know that
     at any time there is a _c_u_r_r_e_n_t _l_i_n_e. Generally speaking, the
     current line is the last line affected by a command; how-
     ever, the exact effect on the current line is discussed
     under the description of the command.  Addresses are con-
     structed as follows.

     1.   The character `.' addresses the current line.

     2.   The character `$' addresses the last line of the
	  buffer.

     3.   A decimal number _n addresses the _n-th line of the
	  buffer.




Printed 11/26/99	 August 12, 1986			2






ED(1)		    UNIX Programmer's Manual		    ED(1)



     4.   `'_x' addresses the line marked with the name _x, which
	  must be a lower-case letter.	Lines are marked with the
	  _k command described below.

     5.   A regular expression enclosed in slashes `/' addresses
	  the line found by searching forward from the current
	  line and stopping at the first line containing a string
	  that matches the regular expression.	If necessary the
	  search wraps around to the beginning of the buffer.

     6.   A regular expression enclosed in queries `?' addresses
	  the line found by searching backward from the current
	  line and stopping at the first line containing a string
	  that matches the regular expression.	If necessary the
	  search wraps around to the end of the buffer.

     7.   An address followed by a plus sign `+' or a minus sign
	  `-' followed by a decimal number specifies that address
	  plus (resp. minus) the indicated number of lines.  The
	  plus sign may be omitted.

     8.   If an address begins with `+' or `-' the addition or
	  subtraction is taken with respect to the current line;
	  e.g. `-5' is understood to mean `.-5'.

     9.   If an address ends with `+' or `-', then 1 is added
	  (resp. subtracted).  As a consequence of this rule and
	  rule 8, the address `-' refers to the line before the
	  current line.  Moreover, trailing `+' and `-' charac-
	  ters have cumulative effect, so `--' refers to the
	  current line less 2.

     10.  To maintain compatibility with earlier versions of the
	  editor, the character `^' in addresses is equivalent to
	  `-'.

     Commands may require zero, one, or two addresses.	Commands
     which require no addresses regard the presence of an address
     as an error.  Commands which accept one or two addresses
     assume default addresses when insufficient are given.  If
     more addresses are given than such a command requires, the
     last one or two (depending on what is accepted) are used.

     Addresses are separated from each other typically by a comma
     `,'.  They may also be separated by a semicolon `;'.  In
     this case the current line `.' is set to the previous
     address before the next address is interpreted.  This
     feature can be used to determine the starting line for for-
     ward and backward searches (`/', `?').  The second address
     of any two-address sequence must correspond to a line fol-
     lowing the line corresponding to the first address.  The
     special form `%' is an abbreviation for the address pair



Printed 11/26/99	 August 12, 1986			3






ED(1)		    UNIX Programmer's Manual		    ED(1)



     `1,$'.

     In the following list of _e_d commands, the default addresses
     are shown in parentheses.	The parentheses are not part of
     the address, but are used to show that the given addresses
     are the default.

     As mentioned, it is generally illegal for more than one com-
     mand to appear on a line.	However, most commands may be
     suffixed by `p' or by `l', in which case the current line is
     either printed or listed respectively in the way discussed
     below.  Commands may also be suffixed by `n', meaning the
     output of the command is to be line numbered.  These suf-
     fixes may be combined in any order.

     (.)a
     <text>
     .
	  The append command reads the given text and appends it
	  after the addressed line.  `.' is left on the last line
	  input, if there were any, otherwise at the addressed
	  line.  Address `0' is legal for this command; text is
	  placed at the beginning of the buffer.

     (., .)c
     <text>
     .
	  The change command deletes the addressed lines, then
	  accepts input text which replaces these lines.  `.' is
	  left at the last line input; if there were none, it is
	  left at the line preceding the deleted lines.

     (., .)d
	  The delete command deletes the addressed lines from the
	  buffer.  The line originally after the last line
	  deleted becomes the current line; if the lines deleted
	  were originally at the end, the new last line becomes
	  the current line.

     e filename
	  The edit command causes the entire contents of the
	  buffer to be deleted, and then the named file to be
	  read in.  `.' is set to the last line of the buffer.
	  The number of characters read is typed.  `filename' is
	  remembered for possible use as a default file name in a
	  subsequent _r or _w command.  If `filename' is missing,
	  the remembered name is used.

     E filename
	  This command is the same as _e, except that no diagnos-
	  tic results when no _w has been given since the last
	  buffer alteration.



Printed 11/26/99	 August 12, 1986			4






ED(1)		    UNIX Programmer's Manual		    ED(1)



     f filename
	  The filename command prints the currently remembered
	  file name.  If `filename' is given, the currently
	  remembered file name is changed to `filename'.

     (1,$)g/regular expression/command list
	  In the global command, the first step is to mark every
	  line which matches the given regular expression.  Then
	  for every such line, the given command list is executed
	  with `.' initially set to that line.	A single command
	  or the first of multiple commands appears on the same
	  line with the global command.  All lines of a multi-
	  line list except the last line must be ended with `\'.
	  _A, _i, and _c commands and associated input are permit-
	  ted; the `.' terminating input mode may be omitted if
	  it would be on the last line of the command list.  The
	  commands _g and _v are not permitted in the command list.

     (.)i

     <text>
     .
	  This command inserts the given text before the
	  addressed line.  `.' is left at the last line input,
	  or, if there were none, at the line before the
	  addressed line.  This command differs from the _a com-
	  mand only in the placement of the text.

     (., .+1)j
	  This command joins the addressed lines into a single
	  line; intermediate newlines simply disappear.  `.' is
	  left at the resulting line.

     ( . )k_x
	  The mark command marks the addressed line with name _x,
	  which must be a lower-case letter.  The address form
	  `'_x' then addresses this line.

     (., .)l
	  The list command prints the addressed lines in an unam-
	  biguous way: non-graphic characters are printed in
	  two-digit octal, and long lines are folded.  The _l com-
	  mand may be placed on the same line after any non-i/o
	  command.

     (., .)m_a
	  The move command repositions the addressed lines after
	  the line addressed by _a.  The last of the moved lines
	  becomes the current line.

     (., .)p
	  The print command prints the addressed lines.  `.' is



Printed 11/26/99	 August 12, 1986			5






ED(1)		    UNIX Programmer's Manual		    ED(1)



	  left at the last line printed.  The _p command may be
	  placed on the same line after any non-i/o command.

     (., .)P
	  This command is a synonym for _p.

     q	  The quit command causes _e_d to exit.  No automatic write
	  of a file is done.

     Q	  This command is the same as _q, except that no diagnos-
	  tic results when no _w has been given since the last
	  buffer alteration.

     ($)r filename
	  The read command reads in the given file after the
	  addressed line.  If no file name is given, the remem-
	  bered file name, if any, is used (see _e and _f com-
	  mands).  The file name is remembered if there was no
	  remembered file name already.  Address `0' is legal for
	  _r and causes the file to be read at the beginning of
	  the buffer.  If the read is successful, the number of
	  characters read is typed.  `.' is left at the last line
	  read in from the file.

     ( ., .)s/regular expression/replacement/	    or,
     ( ., .)s/regular expression/replacement/g
	  The substitute command searches each addressed line for
	  an occurrence of the specified regular expression.  On
	  each line in which a match is found, all matched
	  strings are replaced by the replacement specified, if
	  the global replacement indicator `g' appears after the
	  command.  If the global indicator does not appear, only
	  the first occurrence of the matched string is replaced.
	  It is an error for the substitution to fail on all
	  addressed lines.  Any punctuation character may be used
	  instead of `/' to delimit the regular expression and
	  the replacement.  `.' is left at the last line substi-
	  tuted.

	  An ampersand `&' appearing in the replacement is
	  replaced by the string matching the regular expression.
	  The special meaning of `&' in this context may be
	  suppressed by preceding it by `\'.  The characters `_\_n'
	  where _n is a digit, are replaced by the text matched by
	  the _n-th regular subexpression enclosed between `\('
	  and `\)'.  When nested, parenthesized subexpressions
	  are present, _n is determined by counting occurrences of
	  `\(' starting from the left.

	  Lines may be split by substituting new-line characters
	  into them.  The new-line in the replacement string must
	  be escaped by preceding it by `\'.



Printed 11/26/99	 August 12, 1986			6






ED(1)		    UNIX Programmer's Manual		    ED(1)



	  One or two trailing delimiters may be omitted, implying
	  the `p' suffix.  The special form `s' followed by _n_o
	  delimiters repeats the most recent substitute command
	  on the addressed lines.  The `s' may be followed by the
	  letters r (use the most recent regular expression for
	  the left hand side, instead of the most recent left
	  hand side of a substitute command), p (complement the
	  setting of the _p suffix from the previous substitu-
	  tion), or g (complement the setting of the _g suffix).
	  These letters may be combined in any order.

     (., .)t_a
	  This command acts just like the _m command, except that
	  a copy of the addressed lines is placed after address _a
	  (which may be 0).  `.' is left on the last line of the
	  copy.

     (., .)u
	  The undo command restores the buffer to it's state
	  before the most recent buffer modifying command.  The
	  current line is also restored.  Buffer modifying com-
	  mands are _a, _c, _d, _g, _i, _k, and _v. For purposes of
	  undo, _g and _v are considered to be a single buffer
	  modifying command.  Undo is its own inverse.

	  When _e_d runs out of memory (at about 8000 lines on any
	  16 bit mini-computer such as the PDP-11) This full undo
	  is not possible, and _u can only undo the effect of the
	  most recent substitute on the current line.  This res-
	  tricted undo also applies to editor scripts when _e_d is
	  invoked with the - option.

     (1, $)v/regular expression/command list
	  This command is the same as the global command _g except
	  that the command list is executed _g with `.' initially
	  set to every line _e_x_c_e_p_t those matching the regular
	  expression.

     (1, $)w filename
	  The write command writes the addressed lines onto the
	  given file.  If the file does not exist, it is created.
	  The file name is remembered if there was no remembered
	  file name already.  If no file name is given, the
	  remembered file name, if any, is used (see _e and _f com-
	  mands).  `.' is unchanged.  If the command is success-
	  ful, the number of characters written is printed.

     (1, $)W filename
	  This command is the same as _w, except that the
	  addressed lines are appended to the file.

     (1, $)wq filename



Printed 11/26/99	 August 12, 1986			7






ED(1)		    UNIX Programmer's Manual		    ED(1)



	  This command is the same as _w except that afterwards a
	  _q command is done, exiting the editor after the file is
	  written.

     (.+1)z    or,
     (.+1)z_n
	  This command scrolls through the buffer starting at the
	  addressed line.  22 (or _n, if given) lines are printed.
	  The last line printed becomes the current line.  The
	  value _n is sticky, in that it becomes the default for
	  future _z commands.

     ($)= The line number of the addressed line is typed.  `.' is
	  unchanged by this command.

     !<shell command>
	  The remainder of the line after the `!' is sent to
	  _s_h(1) to be interpreted as a command.  `.' is
	  unchanged.

     (.+1,.+1)<newline>
	  An address alone on a line causes the addressed line to
	  be printed.  A blank line alone is equivalent to
	  `.+1p'; it is useful for stepping through text.  If two
	  addresses are present with no intervening semicolon, _e_d
	  prints the range of lines.  If they are separated by a
	  semicolon, the second line is printed.

     If an interrupt signal (ASCII DEL) is sent, _e_d prints
     `?interrupted' and returns to its command level.

     Some size limitations: 512 characters per line, 256 charac-
     ters per global command list, 64 characters per file name,
     and, on mini computers, 128K characters in the temporary
     file.  The limit on the number of lines depends on the
     amount of core: each line takes 2 words.

     When reading a file, _e_d discards ASCII NUL characters and
     all characters after the last newline.  It refuses to read
     files containing non-ASCII characters.

FILES
     /tmp/e*
     edhup: work is saved here if terminal hangs up

SEE ALSO
     B. W. Kernighan, _A _T_u_t_o_r_i_a_l _I_n_t_r_o_d_u_c_t_i_o_n _t_o _t_h_e _E_D _T_e_x_t _E_d_i_-
     _t_o_r
     B. W. Kernighan, _A_d_v_a_n_c_e_d _e_d_i_t_i_n_g _o_n _U_N_I_X
     ex(1), sed(1), crypt(1)





Printed 11/26/99	 August 12, 1986			8






ED(1)		    UNIX Programmer's Manual		    ED(1)



DIAGNOSTICS
     `?name' for inaccessible file; `?self-explanatory message'
     for other errors.

     To protect against throwing away valuable work, a _q or _e
     command is considered to be in error, unless a _w has
     occurred since the last buffer change.  A second _q or _e will
     be obeyed regardless.

BUGS
     The _l command mishandles DEL.
     The _u_n_d_o command causes marks to be lost on affected lines.











































Printed 11/26/99	 August 12, 1986			9



