


AWK(1)		    UNIX Programmer's Manual		   AWK(1)



NAME
     awk - pattern scanning and processing language

SYNOPSIS
     awk [ -F_c ] [ prog ] [ file ] ...

DESCRIPTION
     _A_w_k scans each input _f_i_l_e for lines that match any of a set
     of patterns specified in _p_r_o_g.  With each pattern in _p_r_o_g
     there can be an associated action that will be performed
     when a line of a _f_i_l_e matches the pattern.  The set of pat-
     terns may appear literally as _p_r_o_g, or in a file specified
     as -f _f_i_l_e.

     Files are read in order; if there are no files, the standard
     input is read.  The file name `-' means the standard input.
     Each line is matched against the pattern portion of every
     pattern-action statement; the associated action is performed
     for each matched pattern.

     An input line is made up of fields separated by white space.
     (This default can be changed by using FS, _v_i_d_e _i_n_f_r_a.) The
     fields are denoted $1, $2, ... ; $0 refers to the entire
     line.

     A pattern-action statement has the form

	  pattern { action }

     A missing { action } means print the line; a missing pattern
     always matches.

     An action is a sequence of statements.  A statement can be
     one of the following:

	  if ( conditional ) statement [ else statement ]
	  while ( conditional ) statement
	  for ( expression ; conditional ; expression ) statement
	  break
	  continue
	  { [ statement ] ... }
	  variable = expression
	  print [ expression-list ] [ >expression ]
	  printf format [ , expression-list ] [ >expression ]
	  next # skip remaining patterns on this input line
	  exit # skip the rest of the input

     Statements are terminated by semicolons, newlines or right
     braces.  An empty expression-list stands for the whole line.
     Expressions take on string or numeric values as appropriate,
     and are built using the operators +, -, *, /, %,  and con-
     catenation (indicated by a blank).  The C operators ++, --,



Printed 11/26/99	 April 29, 1985                         1






AWK(1)		    UNIX Programmer's Manual		   AWK(1)



     +=, -=, *=, /=, and %= are also available in expressions.
     Variables may be scalars, array elements (denoted x[i]) or
     fields.  Variables are initialized to the null string.
     Array subscripts may be any string, not necessarily numeric;
     this allows for a form of associative memory.  String con-
     stants are quoted "...".

     The _p_r_i_n_t statement prints its arguments on the standard
     output (or on a file if >_f_i_l_e is present), separated by the
     current output field separator, and terminated by the output
     record separator.	The _p_r_i_n_t_f statement formats its expres-
     sion list according to the format (see _p_r_i_n_t_f(3S)).

     The built-in function _l_e_n_g_t_h returns the length of its argu-
     ment taken as a string, or of the whole line if no argument.
     There are also built-in functions _e_x_p, _l_o_g, _s_q_r_t, and _i_n_t.
     The last truncates its argument to an integer.
     _s_u_b_s_t_r(_s, _m, _n) returns the _n-character substring of _s that
     begins at position _m.  The function
     _s_p_r_i_n_t_f(_f_m_t, _e_x_p_r, _e_x_p_r, ...) formats the expressions
     according to the _p_r_i_n_t_f(3S) format given by _f_m_t and returns
     the resulting string.

     Patterns are arbitrary Boolean combinations (!, ||, &&, and
     parentheses) of regular expressions and relational expres-
     sions.  Regular expressions must be surrounded by slashes
     and are as in _e_g_r_e_p.  Isolated regular expressions in a pat-
     tern apply to the entire line.  Regular expressions may also
     occur in relational expressions.

     A pattern may consist of two patterns separated by a comma;
     in this case, the action is performed for all lines between
     an occurrence of the first pattern and the next occurrence
     of the second.

     A relational expression is one of the following:

	  expression matchop regular-expression
	  expression relop expression

     where a relop is any of the six relational operators in C,
     and a matchop is either ~ (for contains) or !~ (for does not
     contain).	A conditional is an arithmetic expression, a
     relational expression, or a Boolean combination of these.

     The special patterns BEGIN and END may be used to capture
     control before the first input line is read and after the
     last.  BEGIN must be the first pattern, END the last.

     A single character _c may be used to separate the fields by
     starting the program with




Printed 11/26/99	 April 29, 1985                         2






AWK(1)		    UNIX Programmer's Manual		   AWK(1)



	  BEGIN { FS = "c" }

     or by using the -F_c option.

     Other variable names with special meanings include NF, the
     number of fields in the current record; NR, the ordinal
     number of the current record; FILENAME, the name of the
     current input file; OFS, the output field separator (default
     blank); ORS, the output record separator (default newline);
     and OFMT, the output format for numbers (default "%.6g").

EXAMPLES
     Print lines longer than 72 characters:

	  length > 72

     Print first two fields in opposite order:

	  { print $2, $1 }

     Add up first column, print sum and average:

	       { s += $1 }
	  END  { print "sum is", s, " average is", s/NR }

     Print fields in reverse order:

	  { for (i = NF; i > 0; --i) print $i }

     Print all lines between start/stop pairs:

	  /start/, /stop/

     Print all lines whose first field is different from previous
     one:

	  $1 != prev { print; prev = $1 }

SEE ALSO
     lex(1), sed(1)
     A. V. Aho, B. W. Kernighan, P. J. Weinberger, _A_w_k - _a _p_a_t_-
     _t_e_r_n _s_c_a_n_n_i_n_g _a_n_d _p_r_o_c_e_s_s_i_n_g _l_a_n_g_u_a_g_e

BUGS
     There are no explicit conversions between numbers and
     strings.  To force an expression to be treated as a number
     add 0 to it; to force it to be treated as a string concaten-
     ate "" to it.







Printed 11/26/99	 April 29, 1985                         3



