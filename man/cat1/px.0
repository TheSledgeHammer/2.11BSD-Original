


PX(1)		    UNIX Programmer's Manual		    PX(1)



NAME
     px - Pascal interpreter

SYNOPSIS
     px [ obj [ argument ... ] ]

DESCRIPTION
     _P_x interprets the abstract machine code generated by _p_i. The
     first argument is the file to be interpreted, and defaults
     to _o_b_j; remaining arguments are available to the Pascal pro-
     gram using the built-ins _a_r_g_v and _a_r_g_c. _P_x is also invoked
     by _p_i_x when running `load and go'.

     If the program terminates abnormally an error message and a
     control flow backtrace are printed.  The number of state-
     ments executed and total execution time are printed after
     normal termination.  The p option of _p_i suppresses all of
     this except the message indicating the cause of abnormal
     termination.

FILES
     obj		 default object file
     pmon.out		 profile data file

SEE ALSO
     Berkeley Pascal User's Manual
     pi(1), pix(1)

DIAGNOSTICS
     Most run-time error messages are self-explanatory.  Some of
     the more unusual ones are:

     Reference to an inactive file
	   A file other than _i_n_p_u_t or _o_u_t_p_u_t was used before a
	   call to _r_e_s_e_t or _r_e_w_r_i_t_e.

     Statement count limit exceeded
	   The limit of 500,000 executed statements (which
	   prevents excessive looping or recursion) has been
	   exceeded.

     Bad data found on integer read
     Bad data found on real read
	   Usually, non-numeric input was found for a number.
	   For reals, Pascal requires digits before and after the
	   decimal point so that numbers like `.1' or `21.' evoke
	   the second diagnostic.

     panic: _S_o_m_e _m_e_s_s_a_g_e
	   Indicates a internal inconsistency detected in _p_x
	   probably due to a Pascal system bug.  Charles B.
	   Haley, William N. Joy, and Ken Thompson



Printed 11/26/99						1






PX(1)		    UNIX Programmer's Manual		    PX(1)



BUGS
     Calls to the procedures _d_i_s_p_o_s_e and _l_i_n_e_l_i_m_i_t are ignored.

     Post-mortem traceback is not limited; infinite recursion
     leads to almost infinite traceback.

     Because interrupts sometimes find the system in the middle
     of a procedure or function entry or exit, the error back-
     trace on an interrupt is occasionally meaningless.  The
     current line is, however, always correct; only the call
     backtrace and the name of the current routine may be lost.












































Printed 11/26/99						2



