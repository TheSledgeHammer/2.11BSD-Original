


ERROR(1)	    UNIX Programmer's Manual		 ERROR(1)



NAME
     error - analyze and disperse compiler error messages

SYNOPSIS
     error [ -n ] [ -s ] [ -q ] [ -v ] [ -t suffixlist ] [ -I
     ignorefile ] [ name ]

DESCRIPTION
     _E_r_r_o_r analyzes and optionally disperses the diagnostic error
     messages produced by a number of compilers and language pro-
     cessors to the source file and line where the errors
     occurred.	It can replace the painful, traditional methods
     of scribbling abbreviations of errors on paper, and permits
     error messages and source code to be viewed simultaneously
     without machinations of multiple windows in a screen editor.

     _E_r_r_o_r looks at the error messages, either from the specified
     file _n_a_m_e or from the standard input, and attempts to deter-
     mine which language processor produced each error message,
     determines the source file and line number to which the
     error message refers, determines if the error message is to
     be ignored or not, and inserts the (possibly slightly modi-
     fied) error message into the source file as a comment on the
     line preceding to which the line the error message refers.
     Error messages which can't be categorized by language pro-
     cessor or content are not inserted into any file, but are
     sent to the standard output.  _E_r_r_o_r touches source files
     only after all input has been read.  By specifying the -q
     query option, the user is asked to confirm any potentially
     dangerous (such as touching a file) or verbose action.  Oth-
     erwise _e_r_r_o_r proceeds on its merry business.  If the -t
     touch option and associated suffix list is given, _e_r_r_o_r will
     restrict itself to touch only those files with suffices in
     the suffix list.  Error also can be asked (by specifying -v)
     to invoke _v_i(1) on the files in which error messages were
     inserted; this obviates the need to remember the names of
     the files with errors.

     _E_r_r_o_r is intended to be run with its standard input con-
     nected via a pipe to the error message source.  Some
     language processors put error messages on their standard
     error file; others put their messages on the standard out-
     put.  Hence, both error sources should be piped together
     into _e_r_r_o_r. For example, when using the _c_s_h syntax,

	  make -s lint |& error -q -v

     will analyze all the error messages produced by whatever
     programs _m_a_k_e runs when making lint.

     _E_r_r_o_r knows about the error messages produced by: _m_a_k_e, _c_c,
     _c_p_p, _c_c_o_m, _a_s, _l_d, _l_i_n_t, _p_i, _p_c, _f_7_7, and _D_E_C _W_e_s_t_e_r_n



Printed 11/26/99	October 21, 1996			1






ERROR(1)	    UNIX Programmer's Manual		 ERROR(1)



     _R_e_s_e_a_r_c_h _M_o_d_u_l_a-_2. _E_r_r_o_r knows a standard format for error
     messages produced by the language processors, so is sensi-
     tive to changes in these formats.	For all languages except
     _P_a_s_c_a_l, error messages are restricted to be on one line.
     Some error messages refer to more than one line in more than
     one files; _e_r_r_o_r will duplicate the error message and insert
     it at all of the places referenced.

     _E_r_r_o_r will do one of six things with error messages.

     _s_y_n_c_h_r_o_n_i_z_e
	       Some language processors produce short errors
	       describing which file it is processing.	_E_r_r_o_r
	       uses these to determine the file name for
	       languages that don't include the file name in each
	       error message.  These synchronization messages are
	       consumed entirely by _e_r_r_o_r.

     _d_i_s_c_a_r_d   Error messages from _l_i_n_t that refer to one of the
	       two _l_i_n_t libraries, /_u_s_r/_s_h_a_r_e/_l_i_n_t/_l_l_i_b-_l_c and
	       /_u_s_r/_s_h_a_r_e/_l_i_n_t/_l_l_i_b-_p_o_r_t are discarded, to
	       prevent accidently touching these libraries.
	       Again, these error messages are consumed entirely
	       by _e_r_r_o_r.

     _n_u_l_l_i_f_y   Error messages from _l_i_n_t can be nullified if they
	       refer to a specific function, which is known to
	       generate diagnostics which are not interesting.
	       Nullified error messages are not inserted into the
	       source file, but are written to the standard out-
	       put.  The names of functions to ignore are taken
	       from either the file named ._e_r_r_o_r_r_c in the users's
	       home directory, or from the file named by the -I
	       option.	If the file does not exist, no error mes-
	       sages are nullified.  If the file does exist,
	       there must be one function name per line.

     _n_o_t _f_i_l_e _s_p_e_c_i_f_i_c
	       Error messages that can't be intuited are grouped
	       together, and written to the standard output
	       before any files are touched.  They will not be
	       inserted into any source file.

     _f_i_l_e _s_p_e_c_i_f_i_c
	       Error message that refer to a specific file, but
	       to no specific line, are written to the standard
	       output when that file is touched.

     _t_r_u_e _e_r_r_o_r_s
	       Error messages that can be intuited are candidates
	       for insertion into the file to which they refer.




Printed 11/26/99	October 21, 1996			2






ERROR(1)	    UNIX Programmer's Manual		 ERROR(1)



     Only true error messages are candidates for inserting into
     the file they refer to.  Other error messages are consumed
     entirely by _e_r_r_o_r or are written to the standard output.
     _E_r_r_o_r inserts the error messages into the source file on the
     line preceding the line the language processor found in
     error.  Each error message is turned into a one line comment
     for the language, and is internally flagged with the string
     ``###'' at the beginning of the error, and ``%%%'' at the
     end of the error.	This makes pattern searching for errors
     easier with an editor, and allows the messages to be easily
     removed.  In addition, each error message contains the
     source line number for the line the message refers to.  A
     reasonably formatted source program can be recompiled with
     the error messages still in it, without having the error
     messages themselves cause future errors.  For poorly format-
     ted source programs in free format languages, such as C or
     Pascal, it is possible to insert a comment into another com-
     ment, which can wreak havoc with a future compilation.  To
     avoid this, programs with comments and source on the same
     line should be formatted so that language statements appear
     before comments.

     Options available with _e_r_r_o_r are:

     -n   Do _n_o_t touch any files; all error messages are sent to
	  the standard output.

     -q   The user is _q_u_e_r_i_e_d whether s/he wants to touch the
	  file.  A ``y'' or ``n'' to the question is necessary to
	  continue.  Absence of the -q option implies that all
	  referenced files (except those referring to discarded
	  error messages) are to be touched.

     -v   After all files have been touched, overlay the visual
	  editor _v_i with it set up to edit all files touched, and
	  positioned in the first touched file at the first
	  error.  If _v_i can't be found, try _e_x or _e_d from stan-
	  dard places.

     -t   Take the following argument as a suffix list.  Files
	  whose suffixes do not appear in the suffix list are not
	  touched.  The suffix list is dot separated, and ``*''
	  wildcards work.  Thus the suffix list:

	       ".c.y.foo*.h"

	  allows _e_r_r_o_r to touch files ending with ``.c'', ``.y'',
	  ``.foo*'' and ``.y''.

     -s   Print out _s_t_a_t_i_s_t_i_c_s regarding the error categoriza-
	  tion.  Not too useful.




Printed 11/26/99	October 21, 1996			3






ERROR(1)	    UNIX Programmer's Manual		 ERROR(1)



     _E_r_r_o_r catches interrupt and terminate signals, and if in the
     insertion phase, will orderly terminate what it is doing.

AUTHOR
     Robert Henry

FILES
     ~/.errorrc          function names to ignore for _l_i_n_t error
     messages
     /dev/tty		 user's teletype

BUGS
     Opens the teletype directly to do user querying.

     Source files with links make a new copy of the file with
     only one link to it.

     Changing a language processor's format of error messages may
     cause _e_r_r_o_r to not understand the error message.

     _E_r_r_o_r, since it is purely mechanical, will not filter out
     subsequent errors caused by `floodgating' initiated by one
     syntactically trivial error.  Humans are still much better
     at discarding these related errors.

     Pascal error messages belong after the lines affected (error
     puts them before).  The alignment of the `|' marking the
     point of error is also disturbed by _e_r_r_o_r.

     _E_r_r_o_r was designed for work on CRT's at reasonably high
     speed.  It is less pleasant on slow speed terminals, and has
     never been used on hardcopy terminals.























Printed 11/26/99	October 21, 1996			4



