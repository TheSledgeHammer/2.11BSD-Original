


TUNEFS(8)	    UNIX Programmer's Manual		TUNEFS(8)



NAME
     tunefs - tune up an existing file system

SYNOPSIS
     tunefs _t_u_n_e_u_p-_o_p_t_i_o_n_s _s_p_e_c_i_a_l|_f_i_l_e_s_y_s

DESCRIPTION
     _T_u_n_e_f_s is designed to change the dynamic parameters of a
     file system which affect the layout policies.  The parame-
     ters which are to be changed are indicated by the flags
     given below:

     -a maxcontig
	  This specifies the maximum number of contiguous blocks
	  that will be laid out before forcing a rotational delay
	  (see -d below).  The default value is one, since most
	  device drivers require an interrupt per disk transfer.
	  Device drivers that can chain several buffers together
	  in a single transfer should set this to the maximum
	  chain length.

     -d rotdelay
	  This specifies the expected time (in milliseconds) to
	  service a transfer completion interrupt and initiate a
	  new transfer on the same disk.  It is used to decide
	  how much rotational spacing to place between successive
	  blocks in a file.

     -e maxbpg
	  This indicates the maximum number of blocks any single
	  file can allocate out of a cylinder group before it is
	  forced to begin allocating blocks from another cylinder
	  group.  Typically this value is set to about one quar-
	  ter of the total blocks in a cylinder group.	The
	  intent is to prevent any single file from using up all
	  the blocks in a single cylinder group, thus degrading
	  access times for all files subsequently allocated in
	  that cylinder group.	The effect of this limit is to
	  cause big files to do long seeks more frequently than
	  if they were allowed to allocate all the blocks in a
	  cylinder group before seeking elsewhere.  For file sys-
	  tems with exclusively large files, this parameter
	  should be set higher.

     -m minfree
	  This value specifies the percentage of space held back
	  from normal users; the minimum free space threshold.
	  The default value used is 10%.  This value can be set
	  to zero, however up to a factor of three in throughput
	  will be lost over the performance obtained at a 10%
	  threshold.  Note that if the value is raised above the
	  current usage level, users will be unable to allocate



Printed 11/24/99	November 17, 1996			1






TUNEFS(8)	    UNIX Programmer's Manual		TUNEFS(8)



	  files until enough files have been deleted to get under
	  the higher threshold.

     -o optimization preference
	  The file system can either try to minimize the time
	  spent allocating blocks, or it can attempt minimize the
	  space fragmentation on the disk.  If the value of min-
	  free (see above) is less than 10%, then the file system
	  should optimize for space to avoid running out of full
	  sized blocks.  For values of minfree greater than or
	  equal to 10%, fragmentation is unlikely to be prob-
	  lematical, and the file system can be optimized for
	  time.

SEE ALSO
     fs(5), newfs(8), mkfs(8)

     M. McKusick, W. Joy, S. Leffler, R. Fabry, ``A Fast File
     System for UNIX'', _A_C_M _T_r_a_n_s_a_c_t_i_o_n_s _o_n _C_o_m_p_u_t_e_r _S_y_s_t_e_m_s _2,
     3.  pp 181-197, August 1984.  (reprinted in the System
     Manager's Manual, SMM:14)

BUGS
     This program should work on mounted and active file systems.
     Because the super-block is not kept in the buffer cache, the
     changes will only take effect if the program is run on
     dismounted file systems.  To change the root file system,
     the system must be rebooted after the file system is tuned.

     tunefs is not currently implemented in 2.11BSD.

     You can tune a file system, but you can't tune a fish.























Printed 11/24/99	November 17, 1996			2



