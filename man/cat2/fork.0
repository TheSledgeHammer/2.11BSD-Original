


FORK(2)             UNIX Programmer's Manual		  FORK(2)



NAME
     fork - create a new process

SYNOPSIS
     pid = fork()
     int pid;

DESCRIPTION
     _F_o_r_k causes creation of a new process.  The new process
     (child process) is an exact copy of the calling process
     except for the following:

	  The child process has a unique process ID.

	  The child process has a different parent process ID
	  (i.e., the process ID of the parent process).

	  The child process has its own copy of the parent's
	  descriptors.	These descriptors reference the same
	  underlying objects, so that, for instance, file
	  pointers in file objects are shared between the child
	  and the parent, so that an _l_s_e_e_k(2) on a descriptor in
	  the child process can affect a subsequent _r_e_a_d or _w_r_i_t_e
	  by the parent.  This descriptor copying is also used by
	  the shell to establish standard input and output for
	  newly created processes as well as to set up pipes.

	  The child processes resource utilizations are set to 0;
	  see _s_e_t_r_l_i_m_i_t(2).

RETURN VALUE
     Upon successful completion, _f_o_r_k returns a value of 0 to the
     child process and returns the process ID of the child pro-
     cess to the parent process.  Otherwise, a value of -1 is
     returned to the parent process, no child process is created,
     and the global variable _e_r_r_n_o is set to indicate the error.

ERRORS
     _F_o_r_k will fail and no child process will be created if one
     or more of the following are true:

     [EAGAIN]	    The system-imposed limit on the total number
		    of processes under execution would be
		    exceeded.  This limit is configuration-
		    dependent.

     [EAGAIN]	    The system-imposed limit MAXUPRC
		    (<_s_y_s/_p_a_r_a_m._h>) on the total number of
		    processes under execution by a single user
		    would be exceeded.

     [ENOMEM]	    There is insufficient swap space for the new



Printed 11/26/99	  May 22, 1986				1






FORK(2)             UNIX Programmer's Manual		  FORK(2)



		    process.

SEE ALSO
     execve(2), wait(2)



















































Printed 11/26/99	  May 22, 1986				2



