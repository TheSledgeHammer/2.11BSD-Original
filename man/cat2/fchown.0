


CHOWN(2)	    UNIX Programmer's Manual		 CHOWN(2)



NAME
     chown - change owner and group of a file

SYNOPSIS
     chown(path, owner, group)
     char *path;
     int owner, group;

     fchown(fd, owner, group)
     int fd, owner, group;

DESCRIPTION
     The file that is named by _p_a_t_h or referenced by _f_d has its
     _o_w_n_e_r and _g_r_o_u_p changed as specified.  Only the super-user
     may change the owner of the file, because if users were able
     to give files away, they could defeat the file-space
     accounting procedures.  The owner of the file may change the
     group to a group of which he is a member.

     On some systems, _c_h_o_w_n clears the set-user-id and set-
     group-id bits on the file to prevent accidental creation of
     set-user-id and set-group-id programs.

     _F_c_h_o_w_n is particularly useful when used in conjunction with
     the file locking primitives (see _f_l_o_c_k(2)).

     One of the owner or group id's may be left unchanged by
     specifying it as -1.

     If the final component of _p_a_t_h is a symbolic link, the own-
     ership and group of the symbolic link is changed, not the
     ownership and group of the file or directory to which it
     points.

RETURN VALUE
     Zero is returned if the operation was successful; -1 is
     returned if an error occurs, with a more specific error code
     being placed in the global variable _e_r_r_n_o.

ERRORS
     _C_h_o_w_n will fail and the file will be unchanged if:

     [ENOTDIR]	    A component of the path prefix is not a
		    directory.

     [EINVAL]	    The pathname contains a character with the
		    high-order bit set.

     [ENAMETOOLONG] A component of a pathname exceeded 255 char-
		    acters, or an entire path name exceeded 1023
		    characters.




Printed 11/26/99	  May 22, 1986				1






CHOWN(2)	    UNIX Programmer's Manual		 CHOWN(2)



     [ENOENT]	    The named file does not exist.

     [EACCES]	    Search permission is denied for a component
		    of the path prefix.

     [ELOOP]	    Too many symbolic links were encountered in
		    translating the pathname.

     [EPERM]	    The effective user ID is not the super-user.

     [EROFS]	    The named file resides on a read-only file
		    system.

     [EFAULT]	    _P_a_t_h points outside the process's allocated
		    address space.

     [EIO]	    An I/O error occurred while reading from or
		    writing to the file system.

     _F_c_h_o_w_n will fail if:

     [EBADF]	    _F_d does not refer to a valid descriptor.

     [EINVAL]	    _F_d refers to a socket, not a file.

     [EPERM]	    The effective user ID is not the super-user.

     [EROFS]	    The named file resides on a read-only file
		    system.

     [EIO]	    An I/O error occurred while reading from or
		    writing to the file system.

SEE ALSO
     chown(8), chgrp(1), chmod(2), flock(2)




















Printed 11/26/99	  May 22, 1986				2



