


EXIT(2)             UNIX Programmer's Manual		  EXIT(2)



NAME
     _exit - terminate a process

SYNOPSIS
     _exit(status)
     int status;

DESCRIPTION
     __e_x_i_t terminates a process with the following consequences:

     All of the descriptors open in the calling process are
     closed.  This may entail delays, for example, waiting for
     output to drain; a process in this state may not be killed,
     as it is already dying.

     If the parent process of the calling process is executing a
     _w_a_i_t or is interested in the SIGCHLD signal, then it is
     notified of the calling process's termination and the low-
     order eight bits of _s_t_a_t_u_s are made available to it; see
     _w_a_i_t(2).

     The parent process ID of all of the calling process's exist-
     ing child processes are also set to 1.  This means that the
     initialization process (see _i_n_t_r_o(2)) inherits each of these
     processes as well.  Any stopped children are restarted with
     a hangup signal (SIGHUP).

     Most C programs call the library routine _e_x_i_t(3), which per-
     forms cleanup actions in the standard I/O library before
     calling __e_x_i_t.

RETURN VALUE
     This call never returns.

SEE ALSO
     fork(2), sigvec(2), wait(2), exit(3)



















Printed 11/26/99	  May 22, 1986				1



