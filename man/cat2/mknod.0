


MKNOD(2)	    UNIX Programmer's Manual		 MKNOD(2)



NAME
     mknod - make a special file

SYNOPSIS
     mknod(path, mode, dev)
     char *path;
     int mode, dev;

DESCRIPTION
     _M_k_n_o_d creates a new file whose name is _p_a_t_h. The mode of the
     new file (including special file bits) is initialized from
     _m_o_d_e.  (The protection part of the mode is modified by the
     process's mode mask (see _u_m_a_s_k(2))).  The first block
     pointer of the i-node is initialized from _d_e_v and is used to
     specify which device the special file refers to.

     If mode indicates a block or character special file, _d_e_v is
     a configuration dependent specification of a character or
     block I/O device.	If _m_o_d_e does not indicate a block special
     or character special device, _d_e_v is ignored.

     _M_k_n_o_d may be invoked only by the super-user.

RETURN VALUE
     Upon successful completion a value of 0 is returned.  Other-
     wise, a value of -1 is returned and _e_r_r_n_o is set to indicate
     the error.

ERRORS
     _M_k_n_o_d will fail and the file mode will be unchanged if:

     [ENOTDIR]	    A component of the path prefix is not a
		    directory.

     [EINVAL]	    The pathname contains a character with the
		    high-order bit set.

     [ENAMETOOLONG] A component of a pathname exceeded 255 char-
		    acters, or an entire path name exceeded 1023
		    characters.

     [ENOENT]	    A component of the path prefix does not
		    exist.

     [EACCES]	    Search permission is denied for a component
		    of the path prefix.

     [ELOOP]	    Too many symbolic links were encountered in
		    translating the pathname.

     [EPERM]	    The process's effective user ID is not
		    super-user.



Printed 11/26/99	  May 23, 1986				1






MKNOD(2)	    UNIX Programmer's Manual		 MKNOD(2)



     [EPERM]	    The pathname contains a character with the
		    high-order bit set.

     [EIO]	    An I/O error occurred while making the direc-
		    tory entry or allocating the inode.

     [ENOSPC]	    The directory in which the entry for the new
		    node is being placed cannot be extended
		    because there is no space left on the file
		    system containing the directory.

     [ENOSPC]	    There are no free inodes on the file system
		    on which the node is being created.

     [EDQUOT]	    The directory in which the entry for the new
		    node is being placed cannot be extended
		    because the user's quota of disk blocks on
		    the file system containing the directory has
		    been exhausted.

     [EDQUOT]	    The user's quota of inodes on the file system
		    on which the node is being created has been
		    exhausted.

     [EROFS]	    The named file resides on a read-only file
		    system.

     [EEXIST]	    The named file exists.

     [EFAULT]	    _P_a_t_h points outside the process's allocated
		    address space.

SEE ALSO
     chmod(2), stat(2), umask(2)





















Printed 11/26/99	  May 23, 1986				2



