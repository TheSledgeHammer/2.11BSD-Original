


GETSOCKOPT(2)	    UNIX Programmer's Manual	    GETSOCKOPT(2)



NAME
     getsockopt, setsockopt - get and set options on sockets

SYNOPSIS
     #include <sys/types.h>
     #include <sys/socket.h>

     getsockopt(s, level, optname, optval, optlen)
     int s, level, optname;
     char *optval;
     int *optlen;

     setsockopt(s, level, optname, optval, optlen)
     int s, level, optname;
     char *optval;
     int optlen;

DESCRIPTION
     _G_e_t_s_o_c_k_o_p_t and _s_e_t_s_o_c_k_o_p_t manipulate _o_p_t_i_o_n_s associated with
     a socket.	Options may exist at multiple protocol levels;
     they are always present at the uppermost ``socket'' level.

     When manipulating socket options the level at which the
     option resides and the name of the option must be specified.
     To manipulate options at the ``socket'' level, _l_e_v_e_l is
     specified as SOL_SOCKET.  To manipulate options at any other
     level the protocol number of the appropriate protocol con-
     trolling the option is supplied.  For example, to indicate
     that an option is to be interpreted by the TCP protocol,
     _l_e_v_e_l should be set to the protocol number of TCP; see
     _g_e_t_p_r_o_t_o_e_n_t(3N).

     The parameters _o_p_t_v_a_l and _o_p_t_l_e_n are used to access option
     values for _s_e_t_s_o_c_k_o_p_t.  For _g_e_t_s_o_c_k_o_p_t they identify a
     buffer in which the value for the requested option(s) are to
     be returned.  For _g_e_t_s_o_c_k_o_p_t, _o_p_t_l_e_n is a value-result
     parameter, initially containing the size of the buffer
     pointed to by _o_p_t_v_a_l, and modified on return to indicate the
     actual size of the value returned.  If no option value is to
     be supplied or returned, _o_p_t_v_a_l may be supplied as 0.

     _O_p_t_n_a_m_e and any specified options are passed uninterpreted
     to the appropriate protocol module for interpretation.  The
     include file <_s_y_s/_s_o_c_k_e_t._h> contains definitions for
     ``socket'' level options, described below.  Options at other
     protocol levels vary in format and name; consult the
     appropriate entries in section (4P).

     Most socket-level options take an _i_n_t parameter for _o_p_t_v_a_l.
     For _s_e_t_s_o_c_k_o_p_t, the parameter should non-zero to enable a
     boolean option, or zero if the option is to be disabled.
     SO_LINGER uses a _s_t_r_u_c_t _l_i_n_g_e_r parameter, defined in



Printed 11/26/99	  May 23, 1986				1






GETSOCKOPT(2)	    UNIX Programmer's Manual	    GETSOCKOPT(2)



     <_s_y_s/_s_o_c_k_e_t._h>, which specifies the desired state of the
     option and the linger interval (see below).

     The following options are recognized at the socket level.
     Except as noted, each may be examined with _g_e_t_s_o_c_k_o_p_t and
     set with _s_e_t_s_o_c_k_o_p_t.

	  SO_DEBUG	  toggle recording of debugging information
	  SO_REUSEADDR	  toggle local address reuse
	  SO_KEEPALIVE	  toggle keep connections alive
	  SO_DONTROUTE	  toggle routing bypass for outgoing messages
	  SO_LINGER	  linger on close if data present
	  SO_BROADCAST	  toggle permission to transmit broadcast messages
	  SO_OOBINLINE	  toggle reception of out-of-band data in band
	  SO_SNDBUF	  set buffer size for output
	  SO_RCVBUF	  set buffer size for input
	  SO_TYPE	  get the type of the socket (get only)
	  SO_ERROR	  get and clear error on the socket (get only)

     SO_DEBUG enables debugging in the underlying protocol
     modules.  SO_REUSEADDR indicates that the rules used in
     validating addresses supplied in a _b_i_n_d(2) call should allow
     reuse of local addresses.	SO_KEEPALIVE enables the periodic
     transmission of messages on a connected socket.  Should the
     connected party fail to respond to these messages, the con-
     nection is considered broken and processes using the socket
     are notified via a SIGPIPE signal.  SO_DONTROUTE indicates
     that outgoing messages should bypass the standard routing
     facilities.  Instead, messages are directed to the appropri-
     ate network interface according to the network portion of
     the destination address.

     SO_LINGER controls the action taken when unsent messags are
     queued on socket and a _c_l_o_s_e(2) is performed.  If the socket
     promises reliable delivery of data and SO_LINGER is set, the
     system will block the process on the _c_l_o_s_e attempt until it
     is able to transmit the data or until it decides it is
     unable to deliver the information (a timeout period, termed
     the linger interval, is specified in the _s_e_t_s_o_c_k_o_p_t call
     when SO_LINGER is requested). If SO_LINGER is disabled and a
     _c_l_o_s_e is issued, the system will process the close in a
     manner that allows the process to continue as quickly as
     possible.

     The option SO_BROADCAST requests permission to send broad-
     cast datagrams on the socket.  Broadcast was a privileged
     operation in earlier versions of the system.  With protocols
     that support out-of-band data, the SO_OOBINLINE option
     requests that out-of-band data be placed in the normal data
     input queue as received; it will then be accessible with
     _r_e_c_v or _r_e_a_d calls without the MSG_OOB flag.  SO_SNDBUF and
     SO_RCVBUF are options to adjust the normal buffer sizes



Printed 11/26/99	  May 23, 1986				2






GETSOCKOPT(2)	    UNIX Programmer's Manual	    GETSOCKOPT(2)



     allocated for output and input buffers, respectively.  The
     buffer size may be increased for high-volume connections, or
     may be decreased to limit the possible backlog of incoming
     data.  The system places an absolute limit on these values.
     Finally, SO_TYPE and SO_ERROR are options used only with
     _s_e_t_s_o_c_k_o_p_t.  SO_TYPE returns the type of the socket, such as
     SOCK_STREAM; it is useful for servers that inherit sockets
     on startup.  SO_ERROR returns any pending error on the
     socket and clears the error status.  It may be used to check
     for asynchronous errors on connected datagram sockets or for
     other asynchronous errors.

RETURN VALUE
     A 0 is returned if the call succeeds, -1 if it fails.

ERRORS
     The call succeeds unless:

     [EBADF]		 The argument _s is not a valid descrip-
			 tor.

     [ENOTSOCK]          The argument _s is a file, not a socket.

     [ENOPROTOOPT]	 The option is unknown at the level indi-
			 cated.

     [EFAULT]		 The address pointed to by _o_p_t_v_a_l is not
			 in a valid part of the process address
			 space.  For _g_e_t_s_o_c_k_o_p_t, this error may
			 also be returned if _o_p_t_l_e_n is not in a
			 valid part of the process address space.

SEE ALSO
     ioctl(2), socket(2), getprotoent(3N)

BUGS
     Several of the socket options should be handled at lower
     levels of the system.

















Printed 11/26/99	  May 23, 1986				3



