


PIPE(2)             UNIX Programmer's Manual		  PIPE(2)



NAME
     pipe - create an interprocess communication channel

SYNOPSIS
     pipe(fildes)
     int fildes[2];

DESCRIPTION
     The _p_i_p_e system call creates an I/O mechanism called a pipe.
     The file descriptors returned can be used in read and write
     operations.  When the pipe is written using the descriptor
     _f_i_l_d_e_s[1] up to 4096 bytes of data are buffered before the
     writing process is suspended.  A read using the descriptor
     _f_i_l_d_e_s[0] will pick up the data.

     It is assumed that after the pipe has been set up, two (or
     more) cooperating processes (created by subsequent _f_o_r_k
     calls) will pass data through the pipe with _r_e_a_d and _w_r_i_t_e
     calls.

     The shell has a syntax to set up a linear array of processes
     connected by pipes.

     Read calls on an empty pipe (no buffered data) with only one
     end (all write file descriptors closed) returns an end-of-
     file.

     Pipes are really a special case of the _s_o_c_k_e_t_p_a_i_r(2) call
     and, in fact, are implemented as such in the system.

     A signal is generated if a write on a pipe with only one end
     is attempted.

RETURN VALUE
     The function value zero is returned if the pipe was created;
     -1 if an error occurred.

ERRORS
     The _p_i_p_e call will fail if:

     [EMFILE]	    Too many descriptors are active.

     [ENFILE]	    The system file table is full.

     [EFAULT]	    The _f_i_l_d_e_s buffer is in an invalid area of
		    the process's address space.

SEE ALSO
     sh(1), read(2), write(2), fork(2), socketpair(2)

BUGS
     Should more than 4096 bytes be necessary in any pipe among a



Printed 11/26/99	 August 26, 1985			1






PIPE(2)             UNIX Programmer's Manual		  PIPE(2)



     loop of processes, deadlock will occur.






















































Printed 11/26/99	 August 26, 1985			2



