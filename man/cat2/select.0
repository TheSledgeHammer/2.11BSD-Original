


SELECT(2)	    UNIX Programmer's Manual		SELECT(2)



NAME
     pselect, select - synchronous I/O multiplexing

SYNOPSIS
     #include <sys/types.h>
     #include <sys/time.h>
     #include <sys/select.h>
     #include <signal.h>

     nfound = pselect(nfds, readfds, writefds, exceptfds, timeout, sigmask);
     int nfound, nfds;
     fd_set *readfds, *writefds, *exceptfds;
     struct timespec *timeout;
     sigset_t *sigmask;

     nfound = select(nfds, readfds, writefds, exceptfds, timeout)
     int nfound, nfds;
     fd_set *readfds, *writefds, *exceptfds;
     struct timeval *timeout;

     FD_SET(fd, &fdset)
     FD_CLR(fd, &fdset)
     FD_ISSET(fd, &fdset)
     FD_ZERO(&fdset)
     int fd;
     fd_set fdset;

DESCRIPTION
     _P_s_e_l_e_c_t and _s_e_l_e_c_t examine the I/O descriptor sets whose
     addresses are passed in _r_e_a_d_f_d_s, _w_r_i_t_e_f_d_s, and _e_x_c_e_p_t_f_d_s to
     see if some of their descriptors are ready for reading, are
     ready for writing, or have an exceptional condition pending,
     respectively.  The two functions are identical except for
     the type and format of the _t_i_m_e_o_u_t value, and the additonal
     _s_i_g_m_a_s_k parameter supplied to the _p_s_e_l_e_c_t() call.

     The first _n_f_d_s descriptors are checked in each set; i.e. the
     descriptors from 0 through _n_f_d_s-1 in the descriptor sets are
     examined.	On return, _s_e_l_e_c_t replaces the given descriptor
     sets with subsets consisting of those descriptors that are
     ready for the requested operation.  The total number of
     ready descriptors in all the sets is returned in _n_f_o_u_n_d.

     The descriptor sets are stored as bit fields in arrays of
     integers.	The following macros are provided for manipulat-
     ing such descriptor sets: _F_D__Z_E_R_O(&_f_d_s_e_t) initializes a
     descriptor set _f_d_s_e_t to the null set.  _F_D__S_E_T(_f_d, &_f_d_s_e_t)
     includes a particular descriptor _f_d in _f_d_s_e_t.  _F_D__C_L_R(_f_d,
     &_f_d_s_e_t) removes _f_d from _f_d_s_e_t.  _F_D__I_S_S_E_T(_f_d, &_f_d_s_e_t) is
     nonzero if _f_d is a member of _f_d_s_e_t, zero otherwise.  The
     behavior of these macros is undefined if a descriptor value
     is less than zero or greater than or equal to _F_D__S_E_T_S_I_Z_E,



Printed 3/4/100           March 4, 2000                         1






SELECT(2)	    UNIX Programmer's Manual		SELECT(2)



     which is normally at least equal to the maximum number of
     descriptors supported by the system.

     If _t_i_m_e_o_u_t is a non-zero pointer, it specifies a maximum
     interval to wait for the selection to complete.  If _t_i_m_e_o_u_t
     is a zero pointer, _s_e_l_e_c_t blocks indefinitely.  To affect a
     poll, the _t_i_m_e_o_u_t argument should be non-zero, pointing to a
     zero-valued timeval structure.

     If the _s_i_g_m_a_s_k parameter to _p_s_e_l_e_c_t() is not NULL, it points
     to a signal mask that replaces the previous signal mask for
     the process for the duration of the call, and the previous
     mask is restored upon return; see sigprocmask(3).	This is
     normally used so that signals can be blocked while preparing
     for a call to _p_s_e_l_e_c_t() and then atomically unblocking the
     signals while selecting.

     Any of _r_e_a_d_f_d_s, _w_r_i_t_e_f_d_s, and _e_x_c_e_p_t_f_d_s may be given as zero
     pointers if no descriptors are of interest.

RETURN VALUE
     _S_e_l_e_c_t returns the number of ready descriptors that are con-
     tained in the descriptor sets, or -1 if an error occurred.
     If the time limit expires then _s_e_l_e_c_t returns 0.  If _s_e_l_e_c_t
     returns with an error, including one due to an interrupted
     call, the descriptor sets will be unmodified.

ERRORS
     An error return from _s_e_l_e_c_t indicates:

     [EBADF]	    One of the descriptor sets specified an
		    invalid descriptor.

     [EINTR]	    A signal was delivered before the time limit
		    expired and before any of the selected events
		    occurred.

     [EINVAL]	    The specified time limit is invalid.  One of
		    its components is negative or too large.

SEE ALSO
     accept(2), connect(2), read(2), write(2), recv(2), send(2),
     getdtablesize(2)

BUGS
     Although the provision of _g_e_t_d_t_a_b_l_e_s_i_z_e(2) was intended to
     allow user programs to be written independent of the kernel
     limit on the number of open files, the dimension of a suffi-
     ciently large bit field for select remains a problem.  The
     default size FD_SETSIZE (currently 256) is somewhat larger
     than the current kernel limit to the number of open files.
     However, in order to accommodate programs which might



Printed 3/4/100           March 4, 2000                         2






SELECT(2)	    UNIX Programmer's Manual		SELECT(2)



     potentially use a larger number of open files with select,
     it is possible to increase this size within a program by
     providing a larger definition of FD_SETSIZE before the
     inclusion of <sys/types.h>.

     _S_e_l_e_c_t should probably return the time remaining from the
     original timeout, if any, by modifying the time value in
     place.  This may be implemented in future versions of the
     system.  Thus, it is unwise to assume that the timeout value
     will be unmodified by the _s_e_l_e_c_t call.

     In 2BSD the timeout is implemented in the kernel using the
     _c_a_l_l_o_u_t table.  Since a _c_a_l_l_o_u_t structure only has a signed
     short to store the number of ticks till expiration the max-
     imum value of a kernel timeout is 32767 ticks.  In the US
     (60hz power) this gives a maximum timeout of approximately 9
     minutes.  In countries using 50hz power the maximum timeout
     is about 13 minutes.

     _s_t_r_u_c_t _t_i_m_e_s_p_e_c on a PDP-11 is silly since the hardware has
     nowhere near microsecond much less nanosecond clock resolu-
     tion.

































Printed 3/4/100           March 4, 2000                         3



