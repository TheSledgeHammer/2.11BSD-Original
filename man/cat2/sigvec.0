


SIGVEC(2)	    UNIX Programmer's Manual		SIGVEC(2)



NAME
     sigvec - software signal facilities

SYNOPSIS
     #include <signal.h>

     struct sigvec {
	int    (*sv_handler)();
	long   sv_mask;
	int    sv_flags;
     };

     sigvec(sig, vec, ovec)
     int sig;
     struct sigvec *vec, *ovec;

DESCRIPTION
     This interface has been made obsolete sigaction(2).

     The system defines a set of signals that may be delivered to
     a process.  Signal delivery resembles the occurence of a
     hardware interrupt: the signal is blocked from further
     occurrence, the current process context is saved, and a new
     one is built.  A process may specify a _h_a_n_d_l_e_r to which a
     signal is delivered, or specify that a signal is to be
     _b_l_o_c_k_e_d or _i_g_n_o_r_e_d.  A process may also specify that a
     default action is to be taken by the system when a signal
     occurs.  Normally, signal handlers execute on the current
     stack of the process.  This may be changed, on a per-handler
     basis, so that signals are taken on a special _s_i_g_n_a_l _s_t_a_c_k.

     All signals have the same _p_r_i_o_r_i_t_y.  Signal routines execute
     with the signal that caused their invocation _b_l_o_c_k_e_d, but
     other signals may yet occur.  A global _s_i_g_n_a_l _m_a_s_k defines
     the set of signals currently blocked from delivery to a pro-
     cess.  The signal mask for a process is initialized from
     that of its parent (normally 0).  It may be changed with a
     _s_i_g_b_l_o_c_k(2) or _s_i_g_s_e_t_m_a_s_k(2) call, or when a signal is
     delivered to the process.

     When a signal condition arises for a process, the signal is
     added to a set of signals pending for the process.  If the
     signal is not currently _b_l_o_c_k_e_d by the process then it is
     delivered to the process.	When a signal is delivered, the
     current state of the process is saved, a new signal mask is
     calculated (as described below), and the signal handler is
     invoked.  The call to the handler is arranged so that if the
     signal handling routine returns normally the process will
     resume execution in the context from before the signal's
     delivery.	If the process wishes to resume in a different
     context, then it must arrange to restore the previous con-
     text itself.



Printed 11/26/99	September 3, 1997			1






SIGVEC(2)	    UNIX Programmer's Manual		SIGVEC(2)



     When a signal is delivered to a process a new signal mask is
     installed for the duration of the process' signal handler
     (or until a _s_i_g_b_l_o_c_k or _s_i_g_s_e_t_m_a_s_k call is made).	This mask
     is formed by taking the current signal mask, adding the sig-
     nal to be delivered, and _o_r'ing in the signal mask associ-
     ated with the handler to be invoked.

     _S_i_g_v_e_c assigns a handler for a specific signal.  If _v_e_c is
     non-zero, it specifies a handler routine and mask to be used
     when delivering the specified signal.  Further, if the
     SV_ONSTACK bit is set in _s_v__f_l_a_g_s, the system will deliver
     the signal to the process on a _s_i_g_n_a_l _s_t_a_c_k, specified with
     _s_i_g_s_t_a_c_k(2).  If _o_v_e_c is non-zero, the previous handling
     information for the signal is returned to the user.

     The following is a list of all signals with names as in the
     include file <_s_i_g_n_a_l._h>:

     SIGHUP    1    hangup
     SIGINT    2    interrupt
     SIGQUIT   3*   quit
     SIGILL    4*   illegal instruction
     SIGTRAP   5*   trace trap
     SIGIOT    6*   IOT instruction
     SIGEMT    7*   EMT instruction
     SIGFPE    8*   floating point exception
     SIGKILL   9    kill (cannot be caught, blocked, or ignored)
     SIGBUS    10*  bus error
     SIGSEGV   11*  segmentation violation
     SIGSYS    12*  bad argument to system call
     SIGPIPE   13   write on a pipe with no one to read it
     SIGALRM   14   alarm clock
     SIGTERM   15   software termination signal
     SIGURG    16@  urgent condition present on socket
     SIGSTOP   17'|+'stop (cannot be caught, blocked, or ignored)
     SIGTSTP   18'|+'stop signal generated from keyboard
     SIGCONT   19@  continue after stop (cannot be blocked)
     SIGCHLD   20@  child status has changed
     SIGTTIN   21'|+'background read attempted from control terminal
     SIGTTOU   22'|+'background write attempted to control terminal
     SIGIO     23@  i/o is possible on a descriptor (see _f_c_n_t_l(2))
     SIGXCPU   24   cpu time limit exceeded (see _s_e_t_r_l_i_m_i_t(2))
     SIGXFSZ   25   file size limit exceeded (see _s_e_t_r_l_i_m_i_t(2))
     SIGVTALRM 26   virtual time alarm (see _s_e_t_i_t_i_m_e_r(2))
     SIGPROF   27   profiling timer alarm (see _s_e_t_i_t_i_m_e_r(2))
     SIGWINCH  28@  window size change
     SIGUSR1   30   user defined signal 1
     SIGUSR2   31   user defined signal 2

     The starred signals in the list above cause a core image if
     not caught or ignored.




Printed 11/26/99	September 3, 1997			2






SIGVEC(2)	    UNIX Programmer's Manual		SIGVEC(2)



     Once a signal handler is installed, it remains installed
     until another _s_i_g_v_e_c call is made, or an _e_x_e_c_v_e(2) is per-
     formed.  The default action for a signal may be reinstated
     by setting _s_v__h_a_n_d_l_e_r to SIG_DFL; this default is termina-
     tion (with a core image for starred signals) except for sig-
     nals marked with @ or '|+'.  Signals marked with @ are dis-
     carded if the action is SIG_DFL; signals marked with '|+'
     cause the process to stop.  If _s_v__h_a_n_d_l_e_r is SIG_IGN the
     signal is subsequently ignored, and pending instances of the
     signal are discarded.

     If a caught signal occurs during certain system calls, the
     call is normally restarted.  The call can be forced to ter-
     minate prematurely with an EINTR error return by setting the
     SV_INTERRUPT bit in _s_v__f_l_a_g_s. The affected system calls are
     _r_e_a_d(2) or _w_r_i_t_e(2) on a slow device (such as a terminal;
     but not a file) and during a _w_a_i_t(2).

     After a _f_o_r_k(2) or _v_f_o_r_k(2) the child inherits all signals,
     the signal mask, the signal stack, and the restart/interrupt
     flags.

     _E_x_e_c_v_e(2) resets all caught signals to default action and
     resets all signals to be caught on the user stack.  Ignored
     signals remain ignored; the signal mask remains the same;
     signals that interrupt system calls continue to do so.

NOTES
     The mask specified in _v_e_c is not allowed to block SIGKILL,
     SIGSTOP, or SIGCONT.  This is done silently by the system.

     The SV_INTERRUPT flag is not available in 4.2BSD, hence it
     should not be used if backward compatibility is needed.

RETURN VALUE
     A 0 value indicated that the call succeeded.  A -1 return
     value indicates an error occurred and _e_r_r_n_o is set to indi-
     cated the reason.

ERRORS
     _S_i_g_v_e_c will fail and no new signal handler will be installed
     if one of the following occurs:

     [EFAULT]	    Either _v_e_c or _o_v_e_c points to memory that is
		    not a valid part of the process address
		    space.

     [EINVAL]	    _S_i_g is not a valid signal number.

     [EINVAL]	    An attempt is made to ignore or supply a
		    handler for SIGKILL or SIGSTOP.




Printed 11/26/99	September 3, 1997			3






SIGVEC(2)	    UNIX Programmer's Manual		SIGVEC(2)



     [EINVAL]	    An attempt is made to ignore SIGCONT (by
		    default SIGCONT is ignored).

SEE ALSO
     kill(1), ptrace(2), kill(2), sigblock(2), sigsetmask(2),
     sigpause(2), sigstack(2), sigvec(2), setjmp(3), siginter-
     rupt(3), tty(4)

NOTES  (VAX-11)
     The handler routine can be declared:

	 handler(sig, code, scp)
	 int sig, code;
	 struct sigcontext *scp;

     Here _s_i_g is the signal number, into which the hardware
     faults and traps are mapped as defined below. _C_o_d_e is a
     parameter that is either a constant as given below or, for
     compatibility mode faults, the code provided by the hardware
     (Compatibility mode faults are distinguished from the other
     SIGILL traps by having PSL_CM set in the psl).  _S_c_p is a
     pointer to the _s_i_g_c_o_n_t_e_x_t structure (defined in <_s_i_g_n_a_l._h>),
     used to restore the context from before the signal.

     The following defines the mapping of hardware traps to sig-
     nals and codes.  All of these symbols are defined in
     <_s_i_g_n_a_l._h>:

	Hardware condition		    Signal	 Code

     Arithmetic traps:
	Integer overflow		    SIGFPE	 FPE_INTOVF_TRAP
	Integer division by zero	    SIGFPE	 FPE_INTDIV_TRAP
	Floating overflow trap		    SIGFPE	 FPE_FLTOVF_TRAP
	Floating/decimal division by zero   SIGFPE	 FPE_FLTDIV_TRAP
	Floating underflow trap             SIGFPE	 FPE_FLTUND_TRAP
	Decimal overflow trap		    SIGFPE	 FPE_DECOVF_TRAP
	Subscript-range                     SIGFPE	 FPE_SUBRNG_TRAP
	Floating overflow fault             SIGFPE	 FPE_FLTOVF_FAULT
	Floating divide by zero fault	    SIGFPE	 FPE_FLTDIV_FAULT
	Floating underflow fault	    SIGFPE	 FPE_FLTUND_FAULT
     Length access control		    SIGSEGV
     Protection violation		    SIGBUS
     Reserved instruction		    SIGILL	 ILL_RESAD_FAULT
     Customer-reserved instr.		    SIGEMT
     Reserved operand			    SIGILL	 ILL_PRIVIN_FAULT
     Reserved addressing		    SIGILL	 ILL_RESOP_FAULT
     Trace pending			    SIGTRAP
     Bpt instruction			    SIGTRAP
     Compatibility-mode                     SIGILL	 hardware supplied code
     Chme				    SIGSEGV
     Chms				    SIGSEGV



Printed 11/26/99	September 3, 1997			4






SIGVEC(2)	    UNIX Programmer's Manual		SIGVEC(2)



     Chmu				    SIGSEGV

NOTES  (PDP-11)
     The handler routine can be declared:

	 handler(sig, code, scp)
	 int sig, code;
	 struct sigcontext *scp;

     Here _s_i_g is the signal number, into which the hardware
     faults and traps are mapped as defined below.  _C_o_d_e is a
     parameter that is a constant as given below.  _S_c_p is a
     pointer to the _s_i_g_c_o_n_t_e_x_t structure (defined in <_s_i_g_n_a_l._h>),
     used to restore the context from before the signal.

     The following defines the mapping of hardware traps to sig-
     nals and codes.  All of these symbols are defined in
     <_s_i_g_n_a_l._h>:

	Hardware condition		    Signal	 Code

     Arithmetic traps:
	Floating overflow trap		    SIGFPE	 FPE_FLTOVF_TRAP
	Floating/decimal division by zero   SIGFPE	 FPE_FLTDIV_TRAP
	Floating underflow trap             SIGFPE	 FPE_FLTUND_TRAP
	Decimal overflow trap		    SIGFPE	 FPE_DECOVF_TRAP
	Illegal return code		    SIGFPE	 FPE_CRAZY
	Bad op code			    SIGFPE	 FPE_OPCODE_TRAP
	Bad operand			    SIGFPE	 FPE_OPERAND_TRAP
	Maintenance trap		    SIGFPE	 FPE_MAINT_TRAP
     Length access control		    SIGSEGV
     Protection violation (odd address)     SIGBUS
     Reserved instruction		    SIGILL	 ILL_RESAD_FAULT
     Customer-reserved instr.		    SIGEMT
     Trace pending			    SIGTRAP
     Bpt instruction			    SIGTRAP

     The handler routine must save any registers it uses and
     restore them before returning.  On the PDP-11, the kernel
     saves _r_0 and _r_1 before calling the handler routine, but
     expect the handler to save any other registers it uses.  The
     standard entry code generated by the C compiler for handler
     routines written in C automatically saves the remaining gen-
     eral registers, but floating point registers are _n_o_t saved.
     As a result there is currently no [standard] method for a
     handler routine written in C to perform floating point
     operations without blowing the interrupted program out of
     the water.

BUGS
     This manual page is still confusing.




Printed 11/26/99	September 3, 1997			5



