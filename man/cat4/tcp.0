


TCP(4P)             UNIX Programmer's Manual		  TCP(4P)



NAME
     tcp - Internet Transmission Control Protocol

SYNOPSIS
     #include <sys/socket.h>
     #include <netinet/in.h>

     s = socket(AF_INET, SOCK_STREAM, 0);

DESCRIPTION
     The TCP protocol provides reliable, flow-controlled, two-way
     transmission of data.  It is a byte-stream protocol used to
     support the SOCK_STREAM abstraction.  TCP uses the standard
     Internet address format and, in addition, provides a per-
     host collection of "port addresses".  Thus, each address is
     composed of an Internet address specifying the host and net-
     work, with a specific TCP port on the host identifying the
     peer entity.

     Sockets utilizing the tcp protocol are either "active" or
     "passive".  Active sockets initiate connections to passive
     sockets.  By default TCP sockets are created active; to
     create a passive socket the _l_i_s_t_e_n(2) system call must be
     used after binding the socket with the _b_i_n_d(2) system call.
     Only passive sockets may use the _a_c_c_e_p_t(2) call to accept
     incoming connections.  Only active sockets may use the _c_o_n_-
     _n_e_c_t(2) call to initiate connections.

     Passive sockets may "underspecify" their location to match
     incoming connection requests from multiple networks.  This
     technique, termed "wildcard addressing", allows a single
     server to provide service to clients on multiple networks.
     To create a socket which listens on all networks, the Inter-
     net address INADDR_ANY must be bound.  The TCP port may
     still be specified at this time; if the port is not speci-
     fied the system will assign one.  Once a connection has been
     established the socket's address is fixed by the peer
     entity's location.   The address assigned the socket is the
     address associated with the network interface through which
     packets are being transmitted and received.  Normally this
     address corresponds to the peer entity's network.

     TCP supports one socket option which is set with _s_e_t_-
     _s_o_c_k_o_p_t(2) and tested with _g_e_t_s_o_c_k_o_p_t(2).	Under most cir-
     cumstances, TCP sends data when it is presented; when out-
     standing data has not yet been acknowledged, it gathers
     small amounts of output to be sent in a single packet once
     an acknowledgement is received.  For a small number of
     clients, such as window systems that send a stream of mouse
     events which receive no replies, this packetization may
     cause significant delays.	Therefore, TCP provides a boolean
     option, TCP_NODELAY (from <_n_e_t_i_n_e_t/_t_c_p._h>, to defeat this



Printed 11/26/99	  May 16, 1986				1






TCP(4P)             UNIX Programmer's Manual		  TCP(4P)



     algorithm.  The option level for the _s_e_t_s_o_c_k_o_p_t call is the
     protocol number for TCP, available from _g_e_t_p_r_o_t_o_b_y_n_a_m_e(3N).

     Options at the IP transport level may be used with TCP; see
     _i_p(4P).  Incoming connection requests that are source-routed
     are noted, and the reverse source route is used in respond-
     ing.

DIAGNOSTICS
     A socket operation may fail with one of the following errors
     returned:

     [EISCONN]		 when trying to establish a connection on
			 a socket which already has one;

     [ENOBUFS]		 when the system runs out of memory for
			 an internal data structure;

     [ETIMEDOUT]	 when a connection was dropped due to
			 excessive retransmissions;

     [ECONNRESET]	 when the remote peer forces the connec-
			 tion to be closed;

     [ECONNREFUSED]	 when the remote peer actively refuses
			 connection establishment (usually
			 because no process is listening to the
			 port);

     [EADDRINUSE]	 when an attempt is made to create a
			 socket with a port which has already
			 been allocated;

     [EADDRNOTAVAIL]	 when an attempt is made to create a
			 socket with a network address for which
			 no network interface exists.

SEE ALSO
     getsockopt(2), socket(2), intro(4N), inet(4F), ip(4P)
















Printed 11/26/99	  May 16, 1986				2



