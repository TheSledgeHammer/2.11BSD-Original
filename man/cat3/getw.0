


GETC(3S)	    UNIX Programmer's Manual		 GETC(3S)



NAME
     getc, getchar, fgetc, getw - get character or word from
     stream

SYNOPSIS
     #include <stdio.h>

     int getc(stream)
     FILE *stream;

     int getchar()

     int fgetc(stream)
     FILE *stream;

     int getw(stream)
     FILE *stream;

DESCRIPTION
     _G_e_t_c returns the next character from the named input _s_t_r_e_a_m.

     _G_e_t_c_h_a_r() is identical to _g_e_t_c(_s_t_d_i_n).

     _F_g_e_t_c behaves like _g_e_t_c, but is a genuine function, not a
     macro; it may be used to save object text.

     _G_e_t_w returns the next int (a 32-bit integer on a VAX-11)
     from the named input _s_t_r_e_a_m.  It returns the constant EOF
     upon end of file or error, but since that is a good integer
     value, _f_e_o_f and _f_e_r_r_o_r(3S) should be used to check the suc-
     cess of _g_e_t_w.  _G_e_t_w assumes no special alignment in the
     file.

SEE ALSO
     clearerr(3S), fopen(3S), putc(3S), gets(3S), scanf(3S),
     fread(3S), ungetc(3S)

DIAGNOSTICS
     These functions return the integer constant EOF at end of
     file, upon read error, or if an attempt is made to read a
     file not opened by _f_o_p_e_n.	The end-of-file condition is
     remembered, even on a terminal, and all subsequent attempts
     to read will return EOF until the condition is cleared with
     _c_l_e_a_r_e_r_r(3S).

BUGS
     Because it is implemented as a macro, _g_e_t_c treats a _s_t_r_e_a_m
     argument with side effects incorrectly.  In particular,
     `getc(*f++);' doesn't work sensibly.






Printed 11/26/99	  May 14, 1986				1



