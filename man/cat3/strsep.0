


STRSEP(3)	    UNIX Programmer's Manual		STRSEP(3)



NAME
     strsep - separate strings

SYNOPSIS
     #include <string.h>

     char *
     strsep(stringp, delim)
     _c_h_a_r **_s_t_r_i_n_g_p;
     _c_h_a_r *_d_e_l_i_m;

DESCRIPTION
     The strsep() function locates, in the string referenced by
     *_s_t_r_i_n_g_p , the first occurrence of any character in the
     string _d_e_l_i_m (or the terminating `\0' character) and
     replaces it with a `\0'.  The location of the next character
     after the delimiter character (or NULL, if the end of the
     string was reached) is stored in *_s_t_r_i_n_g_p . The original
     value of *_s_t_r_i_n_g_p is returned.

     An ``empty'' field, i.e. one caused by two adjacent delim-
     iter characters, can be detected by comparing the location
     referenced by the pointer returned in *_s_t_r_i_n_g_p to `\0'.

     If *_s_t_r_i_n_g_p is initially NULL, strsep() returns NULL.

EXAMPLES
     The following uses strsep() to parse a string, containing
     tokens delimited by white space, into an argument vector:

     char **ap, *argv[10], *inputstring;

     for (ap = argv; (*ap = strsep(&inputstring, " \t")) != NULL;)
	  if (**ap != '\0')
	       ++ap;

HISTORY
     The strsep() function is intended as a replacement for the
     strtok() function.  While the strtok() function should be
     preferred for portability reasons (it conforms to ANSI C
     X3.159-1989 (``ANSI C'')) it is unable to handle empty
     fields, i.e. detect fields delimited by two adjacent delim-
     iter characters, or to be used for more than a single string
     at a time.  The strsep() function first appeared in 4.4BSD.











Printed 11/26/99	January 12, 1996			1



