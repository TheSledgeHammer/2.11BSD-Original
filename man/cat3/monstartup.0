


MONITOR(3)	    UNIX Programmer's Manual	       MONITOR(3)



NAME
     monitor, monstartup, moncontrol - prepare execution profile

SYNOPSIS
     monitor(lowpc, highpc, buffer, bufsize, nfunc)
     int (*lowpc)(), (*highpc)();
     short buffer[];

     monstartup(lowpc, highpc)
     int (*lowpc)(), (*highpc)();

     moncontrol(mode)

DESCRIPTION
     There are two different forms of monitoring available: An
     executable program created by:

	  cc -p . . .

     automatically includes calls for the _p_r_o_f(1) monitor and
     includes an initial call to its start-up routine _m_o_n_s_t_a_r_t_u_p
     with default parameters; _m_o_n_i_t_o_r need not be called expli-
     citly except to gain fine control over profil buffer alloca-
     tion.  An executable program created by:

	  cc -pg . . .

     automatically includes calls for the _g_p_r_o_f(1) monitor.

     _M_o_n_s_t_a_r_t_u_p is a high level interface to _p_r_o_f_i_l(2).  _L_o_w_p_c
     and _h_i_g_h_p_c specify the address range that is to be sampled;
     the lowest address sampled is that of _l_o_w_p_c and the highest
     is just below _h_i_g_h_p_c.  _M_o_n_s_t_a_r_t_u_p allocates space using
     _s_b_r_k(2) and passes it to _m_o_n_i_t_o_r (see below) to record a
     histogram of periodically sampled values of the program
     counter, and of counts of calls of certain functions, in the
     buffer.  Only calls of functions compiled with the profiling
     option -p of _c_c(1) are recorded.

     To profile the entire program, it is sufficient to use

	  extern etext();
	  . . .
	  monstartup((int) 2, etext);

     _E_t_e_x_t lies just above all the program text, see _e_n_d(3).

     To stop execution monitoring and write the results on the
     file _m_o_n._o_u_t, use

	  monitor(0);




Printed 11/26/99	  May 15, 1985				1






MONITOR(3)	    UNIX Programmer's Manual	       MONITOR(3)



     then _p_r_o_f(1) can be used to examine the results.

     _M_o_n_c_o_n_t_r_o_l is used to selectively control profiling within a
     program.  This works with either _p_r_o_f(1) or _g_p_r_o_f(1) type
     profiling.  When the program starts, profiling begins.  To
     stop the collection of histogram ticks and call counts use
     _m_o_n_c_o_n_t_r_o_l(0); to resume the collection of histogram ticks
     and call counts use _m_o_n_c_o_n_t_r_o_l(1).  This allows the cost of
     particular operations to be measured.  Note that an output
     file will be produced upon program exit irregardless of the
     state of _m_o_n_c_o_n_t_r_o_l.

     _M_o_n_i_t_o_r is a low level interface to _p_r_o_f_i_l(2).  _L_o_w_p_c and
     _h_i_g_h_p_c are the addresses of two functions; _b_u_f_f_e_r is the
     address of a (user supplied) array of _b_u_f_s_i_z_e short
     integers.	At most _n_f_u_n_c call counts can be kept.	For the
     results to be significant, especially where there are small,
     heavily used routines, it is suggested that the buffer be no
     more than a few times smaller than the range of locations
     sampled.  _M_o_n_i_t_o_r divides the buffer into space to record
     the histogram of program counter samples over the range
     _l_o_w_p_c to _h_i_g_h_p_c, and space to record call counts of func-
     tions compiled with the -p option to _c_c(1).

     To profile the entire program, it is sufficient to use

	  extern etext();
	  . . .
	  monitor((int) 2, etext, buf, bufsize, nfunc);

FILES
     mon.out

SEE ALSO
     cc(1), prof(1), gprof(1), profil(2), sbrk(2)




















Printed 11/26/99	  May 15, 1985				2



