


GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



NAME
     getopt - get option character from command line argument
     list

SYNOPSIS
     #include <stdlib.h>

     extern char *optarg;
     extern int optind;
     extern int optopt;
     extern int opterr;
     extern int optreset;

     _i_n_t
     getopt(argc, argv, optstring)
     _i_n_t _a_r_g_c;
     _c_h_a_r **_a_r_g_v;
     _c_h_a_r *_o_p_t_s_t_r_i_n_g;

DESCRIPTION
     The getopt() function incrementally parses a command line
     argument list _a_r_g_v and returns the next _k_n_o_w_n option charac-
     ter.  An option character is _k_n_o_w_n if it has been specified
     in the string of accepted option characters, _o_p_t_s_t_r_i_n_g.

     The option string _o_p_t_s_t_r_i_n_g may contain the following ele-
     ments: individual characters, and characters followed by a
     colon to indicate an option argument is to follow.  For
     example, an option string """x"" recognizes an option
     ``-x'', and an option string """x:"" recognizes an option
     and argument ``-x _a_r_g_u_m_e_n_t''.  It does not matter to
     getopt() if a following argument has leading white space.

     On return from getopt(), _o_p_t_a_r_g points to an option argu-
     ment, if it is anticipated, and the variable _o_p_t_i_n_d contains
     the index to the next _a_r_g_v argument for a subsequent call to
     getopt().	The variable _o_p_t_o_p_t saves the last _k_n_o_w_n option
     character returned by getopt().

     The variable _o_p_t_e_r_r and _o_p_t_i_n_d are both initialized to 1.
     The _o_p_t_i_n_d variable may be set to another value before a set
     of calls to getopt() in order to skip over more or less argv
     entries.

     In order to use getopt() to evaluate multiple sets of argu-
     ments, or to evaluate a single set of arguments multiple
     times, the variable _o_p_t_r_e_s_e_t must be set to 1 before the
     second and each additional set of calls to getopt(), and the
     variable _o_p_t_i_n_d must be reinitialized.

     The getopt() function returns an EOF when the argument list
     is exhausted, or a non-recognized option is encountered.



Printed 11/26/99	January 12, 1996			1






GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



     The interpretation of options in the argument list may be
     cancelled by the option `--' (double dash) which causes
     getopt() to signal the end of argument processing and return
     an EOF.  When all options have been processed (i.e., up to
     the first non-option argument), getopt() returns EOF.

DIAGNOSTICS
     If the getopt() function encounters a character not found in
     the string _o_p_t_a_r_g or detects a missing option argument it
     writes an error message and returns `?' to the _s_t_d_e_r_r.  Set-
     ting _o_p_t_e_r_r to a zero will disable these error messages.  If
     _o_p_t_s_t_r_i_n_g has a leading `:' then a missing option argument
     causes a `:' to be returned in addition to suppressing any
     error messages.

     Option arguments are allowed to begin with `-'; this is rea-
     sonable but reduces the amount of error checking possible.

EXTENSIONS
     The _o_p_t_r_e_s_e_t variable was added to make it possible to call
     the getopt() function multiple times.  This is an extension
     to the IEEE Std1003.2 (``POSIX'') specification.

EXAMPLE
     extern char *optarg;
     extern int optind;
     int bflag, ch, fd;

     bflag = 0;
     while ((ch = getopt(argc, argv, "bf:")) != EOF)
	  switch(ch) {
	  case 'b':
	       bflag = 1;
	       break;
	  case 'f':
	       if ((fd = open(optarg, O_RDONLY, 0)) < 0) {
		    (void)fprintf(stderr,
			"myname: %s: %s\n", optarg, strerror(errno));
		    exit(1);
	       }
	       break;
	  case '?':
	  default:
	       usage();
     }
     argc -= optind;
     argv += optind;

HISTORY
     The getopt() function appeared 4.3BSD.





Printed 11/26/99	January 12, 1996			2






GETOPT(3)	    UNIX Programmer's Manual		GETOPT(3)



BUGS
     A single dash ``-'' may be specified as an character in _o_p_t_-
     _s_t_r_i_n_g , however it should never have an argument associated
     with it.  This allows getopt() to be used with programs that
     expect ``-'' as an option flag.  This practice is wrong, and
     should not be used in any current development.  It is pro-
     vided for backward compatibility only . By default, a single
     dash causes getopt() to return EOF.  This is, we believe,
     compatible with System V.

     It is also possible to handle digits as option letters.
     This allows getopt() to be used with programs that expect a
     number (``-3'') as an option.  This practice is wrong, and
     should not be used in any current development.  It is pro-
     vided for backward compatibility only.  The following code
     fragment works in most cases.

     int length;
     char *p;

     while ((c = getopt(argc, argv, "0123456789")) != EOF)
	  switch (c) {
	  case '0': case '1': case '2': case '3': case '4':
	  case '5': case '6': case '7': case '8': case '9':
	       p = argv[optind - 1];
	       if (p[0] == '-' && p[1] == ch && !p[2])
		    length = atoi(++p);
	       else
		    length = atoi(argv[optind] + 1);
	       break;
	  }
     }























Printed 11/26/99	January 12, 1996			3



