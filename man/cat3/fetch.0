


DBM(3X)             UNIX Programmer's Manual		  DBM(3X)



NAME
     dbminit, fetch, store, delete, firstkey, nextkey - data base
     subroutines

SYNOPSIS
     #include <dbm.h>

     typedef struct {
	  char *dptr;
	  int dsize;
     } datum;

     dbminit(file)
     char *file;

     datum fetch(key)
     datum key;

     store(key, content)
     datum key, content;

     delete(key)
     datum key;

     datum firstkey()

     datum nextkey(key)
     datum key;

DESCRIPTION
     Note: the dbm library has been superceded by ndbm(3), and is
     now implemented using ndbm.  These functions maintain
     key/content pairs in a data base.	The functions will handle
     very large (a billion blocks) databases and will access a
     keyed item in one or two file system accesses.  The func-
     tions are obtained with the loader option -ldbm.

     _K_e_ys and _c_o_n_t_e_n_ts are described by the _d_a_t_u_m typedef.  A
     _d_a_t_u_m specifies a string of _d_s_i_z_e bytes pointed to by _d_p_t_r.
     Arbitrary binary data, as well as normal ASCII strings, are
     allowed.  The data base is stored in two files.  One file is
     a directory containing a bit map and has `.dir' as its suf-
     fix.  The second file contains all data and has `.pag' as
     its suffix.

     Before a database can be accessed, it must be opened by
     _d_b_m_i_n_i_t. At the time of this call, the files _f_i_l_e.dir and
     _f_i_l_e.pag must exist.  (An empty database is created by
     creating zero-length `.dir' and `.pag' files.)

     Once open, the data stored under a key is accessed by _f_e_t_c_h
     and data is placed under a key by _s_t_o_r_e.  A key (and its



Printed 11/26/99	  May 12, 1986				1






DBM(3X)             UNIX Programmer's Manual		  DBM(3X)



     associated contents) is deleted by _d_e_l_e_t_e.  A linear pass
     through all keys in a database may be made, in an
     (apparently) random order, by use of _f_i_r_s_t_k_e_y and _n_e_x_t_k_e_y.
     _F_i_r_s_t_k_e_y will return the first key in the database.  With
     any key _n_e_x_t_k_e_y will return the next key in the database.
     This code will traverse the data base:

	  for (key = firstkey(); key.dptr != NULL; key =
	  nextkey(key))

DIAGNOSTICS
     All functions that return an _i_n_t indicate errors with nega-
     tive values.  A zero return indicates ok.	Routines that
     return a _d_a_t_u_m indicate errors with a null (0) _d_p_t_r.

SEE ALSO
     ndbm(3)

BUGS
     The `.pag' file will contain holes so that its apparent size
     is about four times its actual content.  Older UNIX systems
     may create real file blocks for these holes when touched.
     These files cannot be copied by normal means (cp, cat, tp,
     tar, ar) without filling in the holes.

     _D_p_t_r pointers returned by these subroutines point into
     static storage that is changed by subsequent calls.

     The sum of the sizes of a key/content pair must not exceed
     the internal block size (currently 1024 bytes).  Moreover
     all key/content pairs that hash together must fit on a sin-
     gle block.  _S_t_o_r_e will return an error in the event that a
     disk block fills with inseparable data.

     _D_e_l_e_t_e does not physically reclaim file space, although it
     does make it available for reuse.

     The order of keys presented by _f_i_r_s_t_k_e_y and _n_e_x_t_k_e_y depends
     on a hashing function, not on anything interesting.
















Printed 11/26/99	  May 12, 1986				2



