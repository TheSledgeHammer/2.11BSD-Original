


FOPEN(3S)	    UNIX Programmer's Manual		FOPEN(3S)



NAME
     fopen, freopen, fdopen - open a stream

SYNOPSIS
     #include <stdio.h>

     FILE *fopen(filename, type)
     char *filename, *type;

     FILE *freopen(filename, type, stream)
     char *filename, *type;
     FILE *stream;

     FILE *fdopen(fildes, type)
     char *type;

DESCRIPTION
     _F_o_p_e_n opens the file named by _f_i_l_e_n_a_m_e and associates a
     stream with it.  _F_o_p_e_n returns a pointer to be used to iden-
     tify the stream in subsequent operations.

     _T_y_p_e is a character string having one of the following
     values:

     "r"  open for reading

     "w"  create for writing

     "a"  append: open for writing at end of file, or create for
	  writing

     In addition, each _t_y_p_e may be followed by a "+" to have the
     file opened for reading and writing.  "r+" positions the
     stream at the beginning of the file, "w+" creates or trun-
     cates it, and "a+" positions it at the end.  Both reads and
     writes may be used on read/write streams, with the limita-
     tion that an _f_s_e_e_k, _r_e_w_i_n_d, or reading an end-of-file must
     be used between a read and a write or vice-versa.

     _F_r_e_o_p_e_n substitutes the named file in place of the open
     _s_t_r_e_a_m.  It returns the original value of _s_t_r_e_a_m.	The ori-
     ginal stream is closed.

     _F_r_e_o_p_e_n is typically used to attach the preopened constant
     names, stdin, stdout, stderr, to specified files.

     _F_d_o_p_e_n associates a stream with a file descriptor obtained
     from _o_p_e_n, _d_u_p, _c_r_e_a_t, or _p_i_p_e(2).  The _t_y_p_e of the stream
     must agree with the mode of the open file.

SEE ALSO
     open(2), fclose(3)



Printed 11/26/99	  May 27, 1986				1






FOPEN(3S)	    UNIX Programmer's Manual		FOPEN(3S)



DIAGNOSTICS
     _F_o_p_e_n and _f_r_e_o_p_e_n return the pointer NULL if _f_i_l_e_n_a_m_e cannot
     be accessed, if too many files are already open, or if other
     resources needed cannot be allocated.

BUGS
     _F_d_o_p_e_n is not portable to systems other than UNIX.

     The read/write _t_y_p_e_s do not exist on all systems.	Those
     systems without read/write modes will probably treat the
     _t_y_p_e as if the "+" was not present.  These are unreliable in
     any event.

     In order to support the same number of open files as does
     the system, _f_o_p_e_n must allocate additional memory for data
     structures using _c_a_l_l_o_c after 20 files have been opened.
     This confuses some programs which use their own memory allo-
     cators.  An undocumented routine, _f__p_r_e_a_l_l_o_c, may be called
     to force immediate allocation of all internal memory except
     for buffers.



































Printed 11/26/99	  May 27, 1986				2



